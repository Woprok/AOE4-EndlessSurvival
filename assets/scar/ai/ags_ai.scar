---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Extensions used to handle incorrect AI behaviour in single player.
-- These functions have to always verify if they can be called.
---------------------------------------------------------------------------------------------------

AGS_AI_MODULE = "AGS_AI"
AGS_AI_ADJUSTREASON_NONE = 0
AGS_AI_ADJUSTREASON_NOMAD = 1
AGS_AI_ADJUSTREASON_HIDE_KING = 2
AGS_AI_ADJUSTREASON_WONDER_CONSTRUCTION = 3

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_AI_MODULE)	

function AGS_AI_UpdateModuleSettings()
	AGS_Print("AGS_AI_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.IsAdjustingAI then
		Core_UnregisterModule(AGS_AI_MODULE)
	end	
end
-- Special handle for all spawned units.
function AGS_AI_UnitsSpawned(player_id, home_position, units)
	AGS_Print("AGS_AI_UnitsSpawned")
	if not AGS_IsLocalGame() or not AGS_AI_IsAI(player_id) then
		return
	end
	
	AGS_AI_AssignSpawnedUnits(player_id, home_position, units)
	AGS_Print("AGS_AI_UnitsSpawned-ASSIGNED")
end
-- Adjustments based on imported active modules.
function AGS_AI_AdjustAIPlayers(reason, opt_player)
	AGS_Print("AGS_AI_AdjustAIPlayers")
	if opt_player == nil then
	else	
		if not AGS_AI_IsAI(opt_player.id) then
			return
		end
		if reason == AGS_AI_ADJUSTREASON_NOMAD then
			AGS_AI_ApplyAdjustment_Nomad(opt_player)
			AGS_Print("AGS_AI_AdjustAIPlayers-NOMADED")
		end
		if reason == AGS_AI_ADJUSTREASON_WONDER_CONSTRUCTION then
			AGS_AI_ApplyAdjustment_WonderConstruction(opt_player)
			AGS_Print("AGS_AI_AdjustAIPlayers-WONDER")
		end
	end	
end
-- Predefined adjustments, that always happen.
function AGS_AI_PresetFinalize()
	AGS_Print("AGS_AI_PresetFinalize")
	AGS_AI_ApplyAdjustment_StoneVision()
end

function AGS_AI_OnPlay()
	AGS_Print("AGS_AI_Start")
	for _, player in pairs(PLAYERS) do
		if AGS_AI_IsAI(player.id) then
			AGS_AI_ApplyAdjustment_HideKing(player)
			AGS_Print("AGS_AI_Start-HIDDEN")
		end			
	end
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_AI_IsAI(player_id)
	return AI_IsAIPlayer(player_id)
end

-- Assigns selected units to AI default control. This once worked with spawned buildings, dunno why it does not work
-- with prefab starting buildings.
function AGS_AI_AssignSpawnedUnits(player_id, home_position, units)
	if home_position == nil then 
		home_position = AGS_Starts_GetStartPosition(player_id)
	end
	local player_ai = AIPlayer_GetLocalFromPlayer(player_id)	
	local home_base_id = AIPlayer_GetOrCreateHomebase(player_ai, home_position)
	AIPlayer_SetSquadHomebase(player_ai, units, home_base_id)
	AIPlayer_SetAllowResourceGatheringOutsideLeash(player_ai, home_base_id, true)
	AIPlayer_SetRequiresStatsUpdate(player_id)
end

function AGS_AI_ApplyAdjustment_StoneVision()
	local outcrop_group = EGroup_CreateIfNotFound("stone_outcrops")
	World_GetAllNeutralEntities(outcrop_group)
	for _, player in pairs(PLAYERS) do 				
		if AGS_AI_IsAI(player.id) and player.raceName == AGS_CIV_MONGOL then			
			local _AGS_ShowStone = function(gid, idx, eid)		
				if eid ~= nil and Entity_IsOfType(eid, "resource") and Entity_IsOfType(eid, "stone") then
					local stone_position = Entity_GetPosition(eid)
					FOW_PlayerRevealArea(player.id, stone_position, 10, 0.25)
				end		
			end			
			EGroup_ForEach(outcrop_group, _AGS_ShowStone)	
		end
	end
end
-- Disables construction for AI players to prevent AI from camping next to useless wonder.
function AGS_AI_ApplyAdjustment_WonderConstruction(player)
	Player_SetStateModelBool(player.id, "is_wonder_construction_enabled", false)	
end
-- Changes certain value as AI might not be able to manage certain nomad conditions.
function AGS_AI_ApplyAdjustment_Nomad(player)	
	Player_SetStateModelBool(player.id, "player_can_construct_structures", false)	
	if player.raceName == AGS_CIV_CHINESE then
		Player_GiftResource(player.id, RT_Wood, 375)
	end
end
-- Changes King position if possible to secure him from danger.
function AGS_AI_ApplyAdjustment_HideKing(player)
	local sqKing = Player_GetSquadsFromType(player.id, AGS_BP_KING)
	if sqKing ~= nil and SGroup_CountSpawned(sqKing) == 1 then
		local ekeep = AGS_EGroupName(player.id, AGS_BP_KEEP)			
		if ekeep ~= nil and EGroup_Exists(ekeep) then
			local egkeep = EGroup_FromName(ekeep)
			Cmd_Garrison(sqKing, egkeep, false, false, true)			
		elseif EGroup_CountSpawned(Player_GetEntitiesFromType(player.id, AGS_BP_TC)) ~= 0 then
			local egtc = Player_GetEntitiesFromType(player.id, AGS_BP_TC)
			Cmd_Garrison(sqKing, egtc, false, false, true)						
		end
	end		
end