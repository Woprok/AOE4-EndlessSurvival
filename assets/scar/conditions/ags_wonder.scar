---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Wonder win condition.
-- The classic 'wonder' win condition in which the player wins by building a wonder and defending it for some time.

-- TODO add event filters
-- Wonder
-- Rule_AddEventFilter_EntityType(Wonder_OnDamageReceived, FC_Victim, FO_OR, { _wonder.types.age4 }, { })
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_wonder_data.scar")
AGS_WONDER_MODULE = "AGS_Wonder"
AGS_WONDER_OBJECTIVE = nil 
AGS_WONDER_ACTIVE = true
AGS_WONDER_FOW_REVEAL_RADIUS = 12
AGS_WONDER_VICTORY_TIME = 15 * 60
AGS_WONDER_CHECK_FREQUENCY = 1.0
AGS_WONDER_RUSH = false
-- This is kinda hack that enables to properly show winner objective based on local context.
AGS_WONDER_WINNER = {
	AGS_Wonder = {	
		-- It has to contain default in case last stand wonder eliminates last opponent.
		-- "Wonderstruck"
		objective_success_title = "$11197536",
		objective_success_param = nil,
	},
}

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_WONDER_MODULE)	

function AGS_Wonder_UpdateModuleSettings()
	AGS_Print("AGS_Wonder_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Wonder then
		Core_UnregisterModule(AGS_WONDER_MODULE)
		return
	end
	AGS_WONDER_VICTORY_TIME = AGS_GLOBAL_SETTINGS.WonderSettings.Timer * 60
	AGS_WONDER_RUSH = AGS_WONDER_VICTORY_TIME == 0
	AGS_WONDER_ACTIVE = AGS_WONDER_ACTIVE or AGS_WONDER_RUSH
end

function AGS_Wonder_OnPlay()
	AGS_Print("AGS_Wonder_OnPlay")
	AGS_Wonder_InitializeWonders()
	Rule_AddGlobalEvent(AGS_Wonder_OnConstructionStart, GE_ConstructionStart)
	Rule_AddGlobalEvent(AGS_Wonder_OnConstructionComplete, GE_ConstructionComplete)
	Rule_AddGlobalEvent(AGS_Wonder_OnDamageReceived, GE_DamageReceived)
	Rule_AddGlobalEvent(AGS_Wonder_OnEntityKilled, GE_EntityKilled)
	AGS_Wonder_EnableConstruction(AGS_WONDER_ACTIVE)
	AGS_Wonder_CreateBuildObjective()
	-- Timers and time checks are initialized last.
	Rule_AddInterval(AGS_Wonder_OnTimerTick, AGS_WONDER_CHECK_FREQUENCY)
end

function AGS_Wonder_TreatyStarted()
	AGS_Print("AGS_Wonder_TreatyStarted")
	-- Wonder rush is only time 
	AGS_WONDER_ACTIVE = false or AGS_WONDER_RUSH
	AGS_Wonder_EnableConstruction(AGS_WONDER_ACTIVE)
end

function AGS_Wonder_TreatyEnded()
	AGS_Print("AGS_Wonder_TreatyEnded")
	AGS_WONDER_ACTIVE = true or AGS_WONDER_RUSH
	AGS_Wonder_EnableConstruction(AGS_WONDER_ACTIVE)
end

function AGS_Wonder_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_Wonder_OnPlayerDefeated")
	if reason == AGS_WR_WONDER then 
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_WONDER)
		AGS_Wonder_TryDeclareWinners()
	else
		AGS_Wonder_CleanWonder(player)
	end
end

function AGS_Wonder_OnRelationshipChanged(observer_id, target_id)
	AGS_Print("AGS_Wonder_OnRelationshipChanged")
	if AGS_WONDER_OBJECTIVE == nil then
		return
	end
	-- This is special case as we need to update objectives title to reflect important change.
	for _, player in pairs(PLAYERS) do
		if not player.isEliminated and player.AGS_Wonder.objective ~= nil then 
			-- This player has wonder objective, maybe inactive but still able to be updated.
			local relation = AGS_GetRelation(player)
			if relation == AGS_SAE_SELF then
				player.AGS_Wonder.objective_success_title = AGS_OBJECTIVES_WONDER_SELF.title
				player.AGS_Wonder.objective_success_param = nil
			elseif relation == AGS_SAE_ALLY then		
				player.AGS_Wonder.objective_success_title = AGS_OBJECTIVES_WONDER_ALLY.title
				player.AGS_Wonder.objective_success_param = player.playerName	
			else
				player.AGS_Wonder.objective_success_title = AGS_OBJECTIVES_WONDER_ENEMY.title
				player.AGS_Wonder.objective_success_param = player.playerName		
			end			
			AGS_Objectives_SetTitle(player.AGS_Wonder.objective, 
				player.AGS_Wonder.objective_success_title, 
				player.AGS_Wonder.objective_success_param)
		end		
	end
end

function AGS_Wonder_OnObjectiveToggle(toggle)
	AGS_Print("AGS_Wonder_OnObjectiveToggle")
	if AGS_WONDER_OBJECTIVE ~= nil then
		AGS_Objectives_Set(AGS_WONDER_OBJECTIVE, nil, toggle)	
	end
end

function AGS_Wonder_OnGameOver()
	AGS_Print("AGS_Wonder_OnGameOver")
	-- Kill timers and time checks before everything else.
	AGS_Wonder_DeactivateTimers()
	Rule_Remove(AGS_Wonder_OnTimerTick)
	Rule_RemoveGlobalEvent(AGS_Wonder_OnConstructionStart)
	Rule_RemoveGlobalEvent(AGS_Wonder_OnConstructionComplete)
	Rule_RemoveGlobalEvent(AGS_Wonder_OnDamageReceived)
	Rule_RemoveGlobalEvent(AGS_Wonder_OnEntityKilled)
	AGS_Wonder_RemoveAllObjectives()
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------

function AGS_Wonder_OnDamageReceived(context)
	-- Excludes razing buildings as they do not have an attacker ?
	if context == nil or context.attacker == nil or context.victim == nil or context.attackerOwner == nil then 
		return 
	end
	-- Neutral entities are not interesting.
	if World_OwnsEntity(context.victim) or World_OwnsEntity(context.attacker) then
		return
	end
	-- We are looking only for wonders.
	if not AGS_IsAWonder(context.victim) then
		return
	end
	-- Exclude scuttling of incomplete buildings.
	if Entity_IsBuilding(context.victim) and Entity_GetBuildingProgress(context.victim) < 1.0 then
		return
	end		
	-- Get building ID and owner
	local entity_uwid = Entity_GetID(context.victim)
	local owner = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(context.victim))
	-- Owner must always have this wonder registered as main for us to do anything with it ?
	if owner.AGS_Wonder.entity_uwid ~= entity_uwid then
		return
	end
	-- If Landmark is being repaired (also triggers OnDamageReceived)
	if context.isRepairing then		
		return
	end
	-- Notifications are skipped if entity is dead as we are only informing of them to take damage.
	if not owner.AGS_Wonder.is_alive then	
		return
	end
	local attacker = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(context.attacker))
	AGS_Notifications_Damaged(entity_uwid, attacker, owner, AGS_NOTIFICATIONS_WONDER_ATTACKED)
end

function AGS_Wonder_OnConstructionStart(context)
	AGS_Wonder_Construction(context, AGS_Wonder_ConstructionStarted)
end

function AGS_Wonder_OnConstructionComplete(context)
	AGS_Wonder_Construction(context, AGS_Wonder_ConstructionCompleted)	
end
-- Takes function and context, if it's valid wonders passes player to callback and calls it.
function AGS_Wonder_Construction(context, construction_callback)
	if context == nil or context.player == nil or context.entity == nil then 
		return
	end	
	if World_OwnsEntity(context.entity) then
		return
	end	
	-- We are looking only for wonders.
	if not AGS_IsAWonder(context.entity) then
		return
	end
	local player = Core_GetPlayersTableEntry(context.player)
	local entity_id = context.entity 
	-- Eliminated players are not interesting for victory conditions.
	if player.isEliminated then
		return
	end
	-- Store entity_uwid on player.
	player.AGS_Wonder.entity_uwid = Entity_GetID(entity_id)
	-- Reveal Wonder location.
	FOW_RevealArea(Entity_GetPosition(entity_id), AGS_WONDER_FOW_REVEAL_RADIUS, -1.0)
	-- Callback execution.
	construction_callback(player, entity_id)
end

function AGS_Wonder_ConstructionStarted(player, entity_id)
	-- Only if construction is in the progress. 
	if Entity_GetBuildingProgress(entity_id) >= 1.0 then
		return
	end
	AGS_Notifications_ObjectiveAction(player, AGS_NOTIFICATIONS_WONDER_CONSTRUCTION)
end

function AGS_Wonder_ConstructionCompleted(player, entity_id)
	-- Start the victory timer and objective across all peers, including those already defeated
	player.AGS_Wonder.is_alive = true
	AGS_Wonder_StartCountdown(player)
end

function AGS_Wonder_OnEntityKilled(context)
	if context.victimOwner == nil or context.victim == nil then
		return
	end	
	-- We are looking only for wonders.
	if not AGS_IsAWonder(context.victim) then
		return
	end
	-- Exclude scuttling of incomplete buildings		
	if Entity_GetBuildingProgress(context.victim) < 1.0 then
		return
	end
	
	local player = Core_GetPlayersTableEntry(context.victimOwner)	
	local entity_uwid = Entity_GetID(context.victim)	
	-- Owner must always have this wonder registered as main for us to do anything with it ?
	if player.AGS_Wonder.entity_uwid ~= entity_uwid then
		return
	end
	
	-- Mark wonder as dead.
	player.AGS_Wonder.is_alive = false
	-- Unreveal FOW around destroyed wonder
	FOW_UnRevealArea(Entity_GetPosition(context.victim))	
	-- Fail the objective and reset the music.
	AGS_Wonder_FailTimerObjective(player)
	
	local killer = nil
	if context.killer ~= nil and not World_OwnsEntity(context.victim) then
		killer = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(context.victim))
	end
	AGS_Notifications_Destroyed(context.victim, player, killer, AGS_NOTIFICATIONS_CONQUEST_DESTROYED)
	AGS_Wonder_Destroyed(player)
end

-- Determine if anything reached the end or call update.
function AGS_Wonder_OnTimerTick()
	for _, player in pairs(PLAYERS) do
		if player.AGS_Wonder.objective ~= nil and player.AGS_Wonder.is_alive 
			and Timer_Exists(player.AGS_Wonder.objective_timer) and Timer_GetRemaining(player.AGS_Wonder.objective_timer) == 0 then
			-- Timer should be stopped once we have a winner.
			Rule_RemoveMe()
			AGS_Wonder_UpdateWonderTimer(player)
			AGS_Wonder_VictoryTriggered(player)
			return
		end
	end
	-- Victory was not triggered yet, we will update game status to reflect timer change from last frame.
	AGS_Wonder_TimerUpdate()	
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- Create place for wonder and his objective and timer.
function AGS_Wonder_InitializeWonders()
	for _, player in pairs(PLAYERS) do
		player.AGS_Wonder = {
			entity_uwid = nil,
			is_alive = false,
			objective = nil,
			objective_timer = string.format("ags_wonder.victory_timer_%d", player.index),
			objective_success_title = nil,
			objective_success_param = nil,
			notifications = { }
		}
	end	
end
-- Switches wonder for treaty on or off.
function AGS_Wonder_EnableConstruction(is_enabled)
	for _, player in pairs(PLAYERS) do
		Player_SetStateModelBool(player.id, "is_wonder_construction_enabled", is_enabled)	
	end
end
-- Stops all active timers.
function AGS_Wonder_DeactivateTimers()
	for _, player in pairs(PLAYERS) do 
		AGS_Wonder_EndTimer(player)
	end	
end
-- Stops active timer for single player
function AGS_Wonder_EndTimer(player)
	if Timer_Exists(player.AGS_Wonder.objective_timer) then
		Timer_End(player.AGS_Wonder.objective_timer)
		Player_SetStateModelFloat(player.id, "wonder_timer", 0)
	end
end
--Removes all objectives regardless of wonder state.
function AGS_Wonder_RemoveAllObjectives()
	AGS_Wonder_RemoveBuildObjective()
	AGS_Wonder_RemoveTimerObjectives()
end
-- Create objective based on relation to owner.
function AGS_Wonder_CreateTimerObjective(owner)
	local relation = AGS_GetRelation(owner)
	local objective_template = nil
	if relation == AGS_SAE_SELF then
		objective_template = AGS_Objectives_CreateFromCore(AGS_OBJECTIVES_WONDER, AGS_OBJECTIVES_WONDER_SELF)
		owner.AGS_Wonder.objective = AGS_Objectives_Create(objective_template, AGS_GS_LOCAL_PLAYER)
		owner.AGS_Wonder.objective_success_title = objective_template.title
		owner.AGS_Wonder.objective_success_param = nil
	elseif relation == AGS_SAE_ALLY then		
		objective_template = AGS_Objectives_CreateFromCore(AGS_OBJECTIVES_WONDER, AGS_OBJECTIVES_WONDER_ALLY)
		owner.AGS_Wonder.objective = AGS_Objectives_Create(objective_template, AGS_GS_LOCAL_PLAYER, owner.playerName)
		owner.AGS_Wonder.objective_success_title = objective_template.title
		owner.AGS_Wonder.objective_success_param = owner.playerName		
	else
		objective_template = AGS_Objectives_CreateFromCore(AGS_OBJECTIVES_WONDER, AGS_OBJECTIVES_WONDER_ENEMY)
		owner.AGS_Wonder.objective = AGS_Objectives_Create(objective_template, AGS_GS_LOCAL_PLAYER, owner.playerName)
		owner.AGS_Wonder.objective_success_title = objective_template.title
		owner.AGS_Wonder.objective_success_param = owner.playerName		
	end
	AGS_Wonder_WarnEveryone(owner, owner.AGS_Wonder.objective, relation, objective_template)
	AGS_Objectives_Set(owner.AGS_Wonder.objective, OS_Incomplete, true, nil, COUNTER_TimerDecreasing)
end
function AGS_Wonder_UpdateTimerObjectives()
	for _, player in pairs(PLAYERS) do
		if not player.isEliminated and player.AGS_Wonder.is_alive and Timer_Exists(player.AGS_Wonder.objective_timer) then
			AGS_Wonder_UpdateWonderTimer(player)
			AGS_Wonder_TimerProgressNotification(player)
		end
	end
end

function AGS_Wonder_UpdateWonderTimer(player)
	-- "wonder_timer" is set across all peers, including those already defeated.
	local remaining = Timer_GetRemaining(player.AGS_Wonder.objective_timer)
	AGS_Objectives_Progress(player.AGS_Wonder.objective, nil, nil, nil, remaining)
	Player_SetStateModelFloat(player.id, "wonder_timer", remaining)	
end

function AGS_Wonder_RemoveTimerObjectives()
	for _, player in pairs(PLAYERS) do 
		if player.AGS_Wonder.objective ~= nil then
			AGS_Objectives_Set(player.AGS_Wonder.objective, nil, false)
		end		
	end
end
-- This is visual for local player only.
function AGS_Wonder_CreateBuildObjective()
	AGS_WONDER_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_WONDER, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_WONDER_OBJECTIVE, OS_Incomplete, true)
end
-- This is visual for local player only.
function AGS_Wonder_RemoveBuildObjective()
	AGS_Objectives_Set(AGS_WONDER_OBJECTIVE, nil, false)
end
-- Removes timer objective 
function AGS_Wonder_FailTimerObjective(owner)	
	-- Reset and change to normal? mix.
	Music_UnlockIntensity()
	ResetMinimumIntensityMusicUnforced()
	Sound_Play2D("mus_shared_victory_countdown_mix_event_reset")
	
	AGS_Wonder_ResetTimerObjective(owner)
end

function AGS_Wonder_WarnEveryone(owner, objective, relation, objective_template)
	local title_param = nil
	if relation ~= AGS_SAE_SELF then
		title_param =  owner.playerName		
	end
	AGS_Objectives_Present(objective, nil, objective_template.title, title_param)
	Sound_Play2D(objective_template.music)
end

function AGS_Wonder_StartCountdown(owner)	
	-- Owner will have popup for completing objective.
	if AGS_GS_LOCAL_PLAYER == owner then
		AGS_Objectives_Present(AGS_WONDER_OBJECTIVE, OS_Complete, AGS_OBJECTIVES_WONDER.title)
		AGS_Wonder_RemoveBuildObjective()
	end
	AGS_Wonder_CreateTimerObjective(owner)			
	AGS_Wonder_CreateTimerNotifications(owner)
	-- Start timer for everyone
	if not Timer_Exists(owner.AGS_Wonder.objective_timer) then 
		Timer_Start(owner.AGS_Wonder.objective_timer, AGS_WONDER_VICTORY_TIME)
	end
end
-- Creates list of untriggered notifications.
function AGS_Wonder_CreateTimerNotifications(player)
	player.AGS_Wonder.notifications = { }
	for i = 1, #AGS_NOTIFICATIONS_COUNTDOWN do
		table.insert(player.AGS_Wonder.notifications, { triggered = false, }) 
	end
end

-- Triggered by entity killed. Removes player specific objective.
function AGS_Wonder_ResetTimerObjective(player)
	Music_UnlockIntensity()
	-- End timer for everyone.
	AGS_Wonder_EndTimer(player)
	-- Finish objective for everyone.
	AGS_Wonder_InformNegativeProgressChange(player)
	-- Local player show build again with automatic popup for objective.
	if AGS_GS_LOCAL_PLAYER == player and not AGS_GLOBAL_SETTINGS.WonderSettings.LastStand then
		AGS_Wonder_CreateBuildObjective()
	end
end

function AGS_Wonder_CleanWonder(player)
	if player.AGS_Wonder.is_alive then
		player.AGS_Wonder.is_alive = false
		if player.AGS_Wonder.entity_uwid ~= nil and Entity_IsValid(player.AGS_Wonder.entity_uwid) then
			local entity = Entity_FromID(player.AGS_Wonder.entity_uwid)
			if entity ~= nil and Entity_IsAlive(entity) then
				Entity_Kill(entity)
			end			
		end			
		-- If wonder timer exists. End and reset timer
		AGS_Wonder_EndTimer(player)
		AGS_Objectives_Set(player.AGS_Wonder.objective, nil, false)	
	end	
end

---------------------------------------------------------------------------------------------------
-- Wonder Checks:
---------------------------------------------------------------------------------------------------
-- Wonder victory was triggered by a wonder timer finishing.
function AGS_Wonder_VictoryTriggered(winner)
	-- Stop the music.
	Music_PersistentStop()
	-- Update this for first and final time.
	AGS_WONDER_WINNER = winner
	
	local losers = AGS_Teams_GetAllCurrentOpponents(winner)
	if #losers > 0 then
		-- Eliminate all players that are not in his valid team.
		AGS_SetPlayerGroupDefeated(
			losers,
			AGS_Presentations_LossWonder, 
			AGS_WR_WONDER,
			AGS_Objectives_PresentWrap(
				winner.AGS_Wonder.objective, 
				OS_Failed, 
				AGS_OBJECTIVES_WONDER_ENEMY.title,
				winner.playerName))
	else
		AGS_Wonder_TryDeclareWinners()		
	end
end

function AGS_Wonder_TryDeclareWinners()
	AGS_Conditions_CheckVictory(AGS_WONDER_ACTIVE, AGS_Presentations_VictoryWonder, AGS_WR_WONDER,
		AGS_Objectives_PresentWrap(
			AGS_WONDER_OBJECTIVE, 
			OS_Complete, 
			AGS_WONDER_WINNER.AGS_Wonder.objective_success_title,
			AGS_WONDER_WINNER.AGS_Wonder.objective_success_param)
		)
end

function AGS_Wonder_InformNegativeProgressChange(owner)
	local relation = AGS_GetRelation(owner)
	local obj = owner.AGS_Wonder.objective
	local state = OS_Failed
	local title = nil
	local title_param = nil
	
	if relation == AGS_SAE_SELF then
		title = AGS_OBJECTIVES_WONDER_SELF.title
	elseif relation == AGS_SAE_ALLY then	
		title = AGS_OBJECTIVES_WONDER_ALLY.title
		title_param = owner.playerName
	else
		state = OS_Complete
		title = AGS_OBJECTIVES_WONDER_ENEMY.title
		title_param = owner.playerName
	end
	AGS_Objectives_Set(obj, state, false)
	AGS_Objectives_Present(obj, state, title, title_param)
end

function AGS_Wonder_Destroyed(owner)	
	-- Last stand elimination otherwise.
	if not owner.isEliminated and AGS_GLOBAL_SETTINGS.WonderSettings.LastStand then
		AGS_SetPlayerDefeated(
			owner.id, 
			AGS_Presentations_LossWonder, 
			AGS_WR_WONDER,
			AGS_Objectives_PresentWrap(
				owner.AGS_Wonder.objective, 
				OS_Failed, 
				AGS_OBJECTIVES_WONDER.title_lost))
	end
end

-- Wonder victory was not yet achieved, update everyone.	
function AGS_Wonder_TimerUpdate()
	for _, player in pairs(PLAYERS) do		
		-- Clear any eliminated player objective
		if player.isEliminated then
			if player.isLocal then 
				AGS_Wonder_RemoveBuildObjective()
			end
			AGS_Wonder_CleanWonder(player)
		end
	end
	AGS_Wonder_UpdateTimerObjectives()
end
	
function AGS_Wonder_TimerProgressNotification(player)	
	for i = 1, #player.AGS_Wonder.notifications do
		-- If threshold notification has not been triggered AND timer is in threshold window
		if not player.AGS_Wonder.notifications[i].triggered and 
			AGS_NOTIFICATIONS_COUNTDOWN[i].time >= Timer_GetRemaining(player.AGS_Wonder.objective_timer) then 
			-- Mark as triggered.
			player.AGS_Wonder.notifications[i].triggered = true
			
			AGS_Notifications_CountdownNotification(player, i, AGS_NOTIFICATIONS_WONDER_COUNTDOWN)
		end
	end	
end