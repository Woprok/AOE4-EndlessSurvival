---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Contains condition helpers for notifications.
-- Notification is showed at any time.
-- Damage notification is available only after certain time.
---------------------------------------------------------------------------------------------------
AGS_NOTIFICATIONS_DAMAGED_INTERVAL = 30.0
-- Runtime list of all notifications timers.
AGS_NOTIFICATIONS_DAMAGED_TIMERS = { }

---------------------------------------------------------------------------------------------------
-- Pre-Filled Functions:
---------------------------------------------------------------------------------------------------

function AGS_Notifications_Damaged(uwid, attacker, owner, notification)
	-- Create entry if this is first time.
	if AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid] == nil then 
		AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid] = {
			damage_timer = string.format("ags_notifications.damage_timer_%d", uwid),
			last_attacker = nil,			
		}
	end
	-- Update Attacker
	AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid].last_attacker = attacker.id
	-- Check if timer is in progress.
	if Timer_Exists(AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid].damage_timer) and 
		Timer_GetRemaining(AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid].damage_timer) > 0.0 then
		return
	end
	-- Start new timer.
	Timer_Start(AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid].damage_timer, AGS_NOTIFICATIONS_DAMAGED_INTERVAL)	
	-- If local is eliminated or attacker is ally/self or owner is enemy this does not create notification.
	local attacker_relation = AGS_GetRelation(attacker)
	local owner_relation = AGS_GetRelation(owner)
	if AGS_GS_LOCAL_PLAYER.isEliminated or attacker_relation ~= AGS_SAE_ENEMY or owner_relation == AGS_SAE_ENEMY then
		return
	end	
	-- Create cue.
	local color = Player_GetUIColour(attacker.id)
	local priority = AGS_NP_LOW
	local title = Loc_FormatText(notification.self_attacked)
	local sfx = notification.attacked_sfx
	-- Fill based on context.
	if owner_relation == AGS_SAE_SELF then
		priority = AGS_NP_MAX
	elseif owner_relation == AGS_SAE_ALLY then
		title = Loc_FormatText(notification.ally_attacked, AGS_GetCurrentName(owner))
	end
	
	AGS_Notifications_CreateTextCue(AGS_NOTIFICATIONS_CORE, priority, title, sfx, color)
end

function AGS_Notifications_Destroyed(uwid, owner, killer, notification)
	-- If local is eliminated or we have no entry for this structure
	if AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid] == nil then
		if killer == nil then
			AGS_Notifications_DestroyedNeutral(uwid, owner, notification)
			return
		else
			AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid] = {
			damage_timer = string.format("ags_notifications.damage_timer_%d", uwid),
			last_attacker = killer.id,			
		}
		end
	end
	if AGS_GS_LOCAL_PLAYER.isEliminated then
		return
	end	
	local attacker_relation = AGS_GetRelation(Core_GetPlayersTableEntry(AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid].last_attacker))
	local owner_relation = AGS_GetRelation(owner)
	-- Create cue.
	local color = Player_GetUIColour(AGS_NOTIFICATIONS_DAMAGED_TIMERS[uwid].last_attacker)
	-- Special case when player destroyed own structure.
	if attacker_relation == AGS_SAE_SELF and owner_relation == AGS_SAE_SELF then
		color = Player_GetUIColour(owner.id)
	end
	local priority = AGS_NP_LOW
	local title = nil
	local sfx = nil
	-- Fill based on context.
	if owner_relation == AGS_SAE_SELF then
		sfx = notification.self_destroyed_sfx
		if owner_relation == attacker_relation then
			title = Loc_FormatText(notification.self_destroyed)
		else
			title = Loc_FormatText(notification.self_crushed)
			priority = AGS_NP_MAX
		end
	elseif owner_relation == AGS_SAE_ALLY then
		sfx = notification.ally_destroyed_sfx
		if owner_relation == attacker_relation then
			title = Loc_FormatText(notification.ally_destroyed)
		else
			title = Loc_FormatText(notification.ally_crushed, AGS_GetCurrentName(owner))
			priority = AGS_NP_MAX
		end
	else
		sfx = notification.enemy_destroyed_sfx
		
		if owner_relation == attacker_relation then
			title = Loc_FormatText(notification.enemy_destroyed, AGS_GetCurrentName(owner))			
		elseif attacker_relation == AGS_SAE_SELF then
			title = Loc_FormatText(notification.self_killed, AGS_GetCurrentName(owner))
		elseif attacker_relation == AGS_SAE_ALLY then
			title = Loc_FormatText(notification.ally_killed, AGS_GetCurrentName(owner))
		else
			title = Loc_FormatText(notification.enemy_killed, AGS_GetCurrentName(owner))		
		end
	end	
	
	AGS_Notifications_CreateTextCue(AGS_NOTIFICATIONS_CORE, priority, title, sfx, color)
end
-- Edge case where building is destroyed by neutral player will now have notification.
-- This can happen only if it was solo killed by boar or something.
-- Otherwise we should have last attacker ?
function AGS_Notifications_DestroyedNeutral(uwid, owner, notification)
	-- this has small priority as it was destroyed by noone ?
	local priority = AGS_NP_LOW
	local title = Loc_FormatText(notification.self_crushed)
	local sfx = notification.enemy_destroyed_sfx
	local color = {1, 1, 1, 1}
	AGS_Notifications_CreateTextCue(AGS_NOTIFICATIONS_CORE, priority, title, sfx, color)
end