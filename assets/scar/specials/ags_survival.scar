---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Survival wave mechanic implementation details:
-- Wave starts at 1 and continue until they reach FinalWave.
-- If FinalWave is set to -1 it will never end, similiarly to this if it' set to 0 it will never start.
-- Units are spawned randomly from Unit table.
-- It's using combination of weight and cost to determine wave composition, each playerthrough should be unique.
-- Spawn point is at the moment fixed to Sacred Sites.
-- Difficulty affects cost scaling.
-- Unit's are spawned to protection player in most cases, after that it will be turned neutral and icon is slapped over them.
--
-- Technical:
-- Core_CallDelegateFunctions("SurvivalEnded") is called if the mod is over due to last wave being spawned.
-- check if this works AIPlayer_RequestHighPath, AIPlayer_ProcessedPathSuccessful
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_survival_data.scar")

AGS_SURVIVAL_MODULE = "AGS_Survival"
-- Each unit represents single key
AGS_SURVIVAL_UNITS = {
	-- Each spawnable unit follows same definition.
	-- bp is for blueprint, 
	-- cost is value of a unit, 
	-- min_wave is first wave it can be used from
	-- weight is how much it should favor spawning this unit if possible, higher is better
	-- key that is used as identifier
	-- always keep here at least one unit with cost of 1
	[1] = { bp = "dc9c718459894f58869e73a73f33effc:unit_survival_peasant_pitchfork", cost = 1, min_wave = 1, weight = 100 },
	[2] = { bp = "dc9c718459894f58869e73a73f33effc:unit_survival_peasant_hunter", cost = 2, min_wave = 10, weight = 50 },
}
AGS_SURVIVAL_COSMETIC_FREQUENCY = 1 -- tick is 0.125
AGS_SURVIVAL_CHECK_FREQUENCY = 0.5 -- tick is 0.125
AGS_SURVIVAL_SPAWN_FREQUENCY = 15 -- every 15 secs is check invoked.
AGS_SURVIVAL_SPAWNS_CHECKS = { }
AGS_SURVIVAL_SPAWNS = { }
AGS_SURVIVAL_WAVES = {
	NameScheme = "AGS_Survival_Wave",
	SchedulerTimer = 0, -- current time saved
	SchedulerWaitTime = 0, -- keep this same as first item
	SchedulerWave = {
		-- Wave that must be reached for use.
		-- Interval that must have passed.
		[1] = { FromWave = 00, Interval = AGS_SURVIVAL_SPAWN_FREQUENCY * 10, }, 
		[2] = { FromWave = 01, Interval = AGS_SURVIVAL_SPAWN_FREQUENCY * 8, }, 
		[3] = { FromWave = 05, Interval = AGS_SURVIVAL_SPAWN_FREQUENCY * 7, }, 
		[4] = { FromWave = 11, Interval = AGS_SURVIVAL_SPAWN_FREQUENCY * 5, },
		[5] = { FromWave = 26, Interval = AGS_SURVIVAL_SPAWN_FREQUENCY * 3, },
		[6] = { FromWave = 51, Interval = AGS_SURVIVAL_SPAWN_FREQUENCY * 2, },
		[6] = { FromWave = 76, Interval = AGS_SURVIVAL_SPAWN_FREQUENCY * 1, },
	},	
	LastWave = 0,
	LastWaveCost = 0,
	FinalWave = 0,
	Difficulty = 0,
	DifficultyScale = 1, -- keep as integer
	MultiplayerScale = 0, -- Additional bonus is applied only to main wave.
	MultiplayerAdditionalWaves = 0, -- Additional wave count.
	IsFinished = false,
	SpawnEntityType = AGS_BP_SACRED_SITE,
	SpawnSquadType = "hero",
	NotifyWaveAppeared = true, -- Plays sound and makes a map blip for spawned wave.
	NotifyWaveAppearedBlip = "cta_alarm", -- "threat_group",
	NotifyWaveAppearedSound = "sfx_campaign_scripted_attack_horn_under_attack_high",
}
---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_SURVIVAL_MODULE)	

function AGS_Survival_UpdateModuleSettings()
	AGS_Print("AGS_Survival_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Survival then
		Core_UnregisterModule(AGS_SURVIVAL_MODULE)
	end
end

function AGS_Survival_EarlyInitializations()
	AGS_Print("AGS_Survival_EarlyInitializations")
	-- Applies type and difficulty settings
	AGS_Survival_UpdateSurvivalWavesSettings()	
end

function AGS_Survival_PresetExecute()
	AGS_Print("AGS_Survival_PresetExecute")
	AGS_Survival_SaveSpawnPoints()
end

function AGS_Survival_OnPlay()
	AGS_Print("AGS_Survival_OnPlay")
	Rule_AddInterval(AGS_Survival_OnTimerTick, AGS_SURVIVAL_SPAWN_FREQUENCY)
	-- Cosmetics have lesser priority.
	AGS_Survival_CreateObjective()
	AGS_Survival_StartCosmeticTimer()
	Rule_AddInterval(AGS_Survival_OnCosmeticTick, AGS_SURVIVAL_COSMETIC_FREQUENCY)	
end

function AGS_Survival_OnGameOver()
	AGS_Print("AGS_Survival_OnGameOver")
	if Rule_Exists(AGS_Survival_OnTimerTick) then
		Rule_Remove(AGS_Survival_OnTimerTick)
	end
	if Rule_Exists(AGS_Survival_CheckWavesAlive) then
		Rule_Remove(AGS_Survival_CheckWavesAlive)
	end
	if Rule_Exists(AGS_Survival_OnCosmeticTick) then
		Rule_Remove(AGS_Survival_OnCosmeticTick)
	end
	AGS_Survival_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------

function AGS_Survival_OnTimerTick()	
	-- Wave starts
	if AGS_SURVIVAL_WAVES.LastWave == AGS_SURVIVAL_WAVES.FinalWave then
		-- Final wave was already sent and we can mark this as over.
		Rule_RemoveMe()
		AGS_Print("AGS_Survival_OnTimerTick-Stopped")
		AGS_SURVIVAL_WAVES.IsFinished = true
		Rule_AddInterval(AGS_Survival_CheckWavesAlive, AGS_SURVIVAL_CHECK_FREQUENCY)
		return
	end
	
	-- Scheduler advances by the specified time regardless of circumstances
	AGS_SURVIVAL_WAVES.SchedulerTimer = AGS_SURVIVAL_WAVES.SchedulerTimer + AGS_SURVIVAL_SPAWN_FREQUENCY
	-- Select latest scheduler
	local current_schedule = AGS_Survival_GetLatestScheduler()
	
	if current_schedule == nil then
		AGS_Print("AGS_Survival_OnTimerTick-Scheduler-Error")
		return
	end
	
	-- with schedule we can now use % to determine if wave is supposed to spawn
	AGS_SURVIVAL_WAVES.SchedulerTimer = AGS_SURVIVAL_WAVES.SchedulerTimer % current_schedule.Interval
	-- wave is spawned on 0, otherwise we end.
	if AGS_SURVIVAL_WAVES.SchedulerTimer == 0 then
		AGS_Survival_StartNewWaveGroup()
		AGS_Survival_StartCosmeticTimer()
	end	
end

function AGS_Survival_CheckWavesAlive()
	local are_waves_dead = false
		
	local ename = AGS_SURVIVAL_WAVES.NameScheme		
	local egroup = EGroup_CreateIfNotFound(ename)
	World_GetAllNeutralEntities(egroup)
	-- Filter and keep only surviving enemies
	EGroup_FilterSquads(egroup, FILTER_KEEP) -- originally intended to use SGroup_FilterSpawned
	EGroup_Filter(egroup, AGS_SURVIVAL_WAVES.SpawnSquadType, FILTER_KEEP)
	local current = EGroup_Count(egroup)
	--AGS_Print("AGS_Survival_CheckWavesAlive-Final", current)
	
	-- All waves are supposed to be dead based on this ?
	if current == 0 then
		are_waves_dead = true
	end
	
	if AGS_SURVIVAL_WAVES.IsFinished and are_waves_dead then
		AGS_Print("AGS_Survival_CheckWavesAlive-AllDead")
		Core_CallDelegateFunctions("SurvivalEnded")
		Rule_RemoveMe()		
	end
	
	EGroup_Destroy(egroup)
end
---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- This spawns waves with respect to multiplayer modifiers.
function AGS_Survival_StartNewWaveGroup()
	local player_id = AGS_GetNextHuman().id
	local target_position =  World_Pos(0,World_GetHeightAt(0,0),0)
	
	-- Base calculation
	local new_wave_order = AGS_Survival_AdvanceWave()
	local new_wave_cost = AGS_Survival_UpdateWaveCost()
	-- Follow with multiplayer adjustment
	local main_wave_cost = new_wave_cost + math.floor(new_wave_cost * AGS_SURVIVAL_WAVES.MultiplayerScale)
	local additional_waves = AGS_SURVIVAL_WAVES.MultiplayerAdditionalWaves
	
	-- Select random position to spawn main wave
	local random_position = World_GetRand(1, #AGS_SURVIVAL_SPAWNS)	
	local start_position = AGS_SURVIVAL_SPAWNS[random_position].position	
	AGS_Survival_SpawnWave(player_id, start_position, target_position, new_wave_order, main_wave_cost)
	
	-- Additional waves after the main one
	for i=1, additional_waves do 
		-- Update to random position and spawn
		random_position = World_GetRand(1, #AGS_SURVIVAL_SPAWNS)	
		start_position = AGS_SURVIVAL_SPAWNS[random_position].position
		AGS_Survival_SpawnWave(player_id, start_position, target_position, new_wave_order, new_wave_cost)
	end
end
-- Complete creation of new wave.
function AGS_Survival_SpawnWave(player_id, start_position, target_position, current_wave, current_wave_cost)
	local wave_composition = AGS_Survival_RandomArmy(current_wave, current_wave_cost)
	for key, count in pairs(wave_composition) do
		AGS_Survival_SpawnUnitGroup(player_id, start_position, target_position, AGS_SURVIVAL_UNITS[key].bp, count)
	end
end
-- Saves spawn points, we are using map entity such as sacred site as spawn point.
function AGS_Survival_SaveSpawnPoints()	
	local all_prefab_sites = EGroup_CreateUnique()
	World_GetBlueprintEntities(AGS_GetNeutralEntity(AGS_SURVIVAL_WAVES.SpawnEntityType), all_prefab_sites)
	for i = 1, EGroup_CountSpawned(all_prefab_sites) do
		local eid = EGroup_GetSpawnedEntityAt(all_prefab_sites, i)
		if AGS_SURVIVAL_SPAWNS_CHECKS[eid] == nil then
			AGS_SURVIVAL_SPAWNS_CHECKS[eid] = true
			table.insert(AGS_SURVIVAL_SPAWNS, { entity_id = eid, position = Entity_GetPosition(eid) })
		end
	end
end

---------------------------------------------------------------------------------------------------
-- Helpers:
---------------------------------------------------------------------------------------------------
	
-- Determines order of the next wave and updates saved value to it.
function AGS_Survival_AdvanceWave()
	AGS_SURVIVAL_WAVES.LastWave = AGS_SURVIVAL_WAVES.LastWave + 1
	return AGS_SURVIVAL_WAVES.LastWave 
end
	
-- Determines cost of the next wave and updates saved value to it.
function AGS_Survival_UpdateWaveCost()
	AGS_SURVIVAL_WAVES.LastWaveCost = AGS_SURVIVAL_WAVES.LastWaveCost + AGS_SURVIVAL_WAVES.DifficultyScale * AGS_SURVIVAL_WAVES.Difficulty
	return AGS_SURVIVAL_WAVES.LastWaveCost
end
	
-- Determines multiplayer settings.
function AGS_Survival_UpdateSurvivalWavesSettings()
	AGS_Print("AGS_Survival_UpdateSurvivalWavesSettings-TakenSettings", AGS_GLOBAL_SETTINGS.SurvivalSettings)
		
	AGS_SURVIVAL_WAVES.FinalWave = AGS_GLOBAL_SETTINGS.SurvivalSettings.WaveCount
	AGS_SURVIVAL_WAVES.Difficulty = AGS_GLOBAL_SETTINGS.SurvivalSettings.Difficulty
	AGS_SURVIVAL_WAVES.SpawnEntity = AGS_BP_SACRED_SITE
	AGS_SURVIVAL_WAVES.PlayerCount = World_GetPlayerCount()
		
	AGS_Survival_UpdateMultiplayerAdjustments(AGS_GLOBAL_SETTINGS.SurvivalSettings.MultiplayerAdjustment)
		
	AGS_Print("AGS_Survival_UpdateSurvivalWavesSettings-FinalWaves", AGS_SURVIVAL_WAVES)
end

-- Additional bonus is applied only to main wave. 
-- Additional wave count is determined by 100% overflow.
-- For 0 it's not doing anything. For 25 - 100 it's using only additional players. 101+ for all players.
function AGS_Survival_UpdateMultiplayerAdjustments(adjustment)
	local for_group = 0
	if adjustment == 0 then
		for_group = 0 
	elseif adjustment >= 25 and adjustment <= 100 then 
		for_group = adjustment * (AGS_SURVIVAL_WAVES.PlayerCount - 1)
	elseif adjustment > 100 then 
		for_group = adjustment * AGS_SURVIVAL_WAVES.PlayerCount
	end
	local main_wave_scale = (for_group % 100) / 100
	local add_wave_count = math.floor(for_group / 100)
	-- Additional bonus is applied only to main wave. 
	AGS_SURVIVAL_WAVES.MultiplayerScale = main_wave_scale
	-- Additional wave count is determined by 100% overflow.
	AGS_SURVIVAL_WAVES.MultiplayerAdditionalWaves = add_wave_count 
end
	
-- Visual and sound clue about the wave appearance.
function AGS_Survival_WaveAppearedWarning(wave_start_position)
	if AGS_SURVIVAL_WAVES.NotifyWaveAppeared then
		UI_CreateMinimapBlip(wave_start_position, 5, AGS_SURVIVAL_WAVES.NotifyWaveAppearedBlip)
		Sound_Play2D(AGS_SURVIVAL_WAVES.NotifyWaveAppearedSound)
	end
end
-- Units are spawned to first human in the game.
function AGS_Survival_SpawnUnitGroup(initiator_id, spawn_position, target_position, unit_bp_name, unit_count)
	local sbp_unit = BP_GetSquadBlueprint(unit_bp_name)
	local sname = AGS_SGroupName(initiator_id, AGS_SURVIVAL_WAVES.NameScheme)		
	local sgroup = SGroup_CreateIfNotFound(sname)
	-- Spawn
	UnitEntry_DeploySquads(initiator_id, sgroup, {{sbp = sbp_unit, numSquads = unit_count}}, spawn_position)
	
	-- Transfer & Command
	Cmd_AttackMove(sgroup, target_position)
	SGroup_SetWorldOwned(sgroup)
	-- Icon
	SGroup_ForEach(sgroup, AGS_Survival_AddIcon)
	-- Notify
	AGS_Survival_WaveAppearedWarning(spawn_position)	
	
	-- Clean
	SGroup_Destroy(sgroup)
end
-- Necessary for neutral units to have icon.
function AGS_Survival_AddIcon(gid, idx, sid)
	MapIcon_CreateSquad(sid, "icons\\minimap\\military_route_neutral", 0.15, 1, 1, 1, 1)
end
-- Creates army based on cost and weights. Returns key, count table.
function AGS_Survival_RandomArmy(max_wave, max_cost)
	if max_cost < 1 then
		max_cost = 1
	end
	local current_cost = 0
	-- key of the unit and then count
	local final_army = { }
	
	while current_cost < max_cost do
		local remaining_cost = max_cost - current_cost
		local unit_key = AGS_Survival_GetRandomUnit(max_wave, remaining_cost)
		current_cost = current_cost + AGS_SURVIVAL_UNITS[unit_key].cost
		-- increment or add
		if final_army[unit_key] ~= nil then
			final_army[unit_key] = final_army[unit_key] + 1
		else
			final_army[unit_key] = 1
		end
	end
	
	return final_army	
end
-- Returns key from unit table and it's cost as that will be immediately used
function AGS_Survival_GetRandomUnit(max_wave, max_unit_cost)
	-- chances
	local total_weight = 0
	for key, data in pairs(AGS_SURVIVAL_UNITS) do 
		if max_unit_cost >= data.cost and max_wave >= data.min_wave then
			total_weight = total_weight + data.weight
		end
	end
	-- rng (this must synchronize)
	local generated_weight = World_GetRand(1, total_weight)
	local incrementing_weight = 0
	-- retrieve unit
	for key, data in pairs(AGS_SURVIVAL_UNITS) do 
		if max_unit_cost >= data.cost and max_wave >= data.min_wave then
			incrementing_weight = incrementing_weight + data.weight
			if incrementing_weight >= generated_weight then
				return key
			end			
		end
	end
	AGS_Print("AGS_Survival_GetRandomUnit-ERROR")
	-- if this failed return unit in the table under key 1
	return 1
end

-- Select latest scheduler
function AGS_Survival_GetLatestScheduler()
	local current_schedule = nil
	for _, schedule in pairs(AGS_SURVIVAL_WAVES.SchedulerWave) do 
		if AGS_SURVIVAL_WAVES.LastWave >= schedule.FromWave then
			current_schedule = schedule
		end		
	end	
	return current_schedule
end

---------------------------------------------------------------------------------------------------
-- Cosmetics & Objectives:
---------------------------------------------------------------------------------------------------
AGS_SURVIVAL_OBJECTIVE = nil
AGS_SURVIVAL_TIMER = "AGS_SurvivalTimer"

function AGS_Survival_CreateObjective()
	AGS_SURVIVAL_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_SURVIVAL, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_SURVIVAL_OBJECTIVE, OS_Incomplete, true, nil, COUNTER_TimerDecreasing)
end

function AGS_Survival_UpdateObjective()
	AGS_Objectives_Progress(
		AGS_SURVIVAL_OBJECTIVE, 
		nil,
		nil,
		nil,
		Timer_GetRemaining(AGS_SURVIVAL_TIMER)
	)
	AGS_Objectives_SetTitle(AGS_SURVIVAL_OBJECTIVE, AGS_OBJECTIVES_SURVIVAL.title, AGS_SURVIVAL_WAVES.LastWave)
end
-- Called only on start and when wave is spawned.
function AGS_Survival_StartCosmeticTimer(next_wait_time)
	local current_schedule = AGS_Survival_GetLatestScheduler()
	
	if current_schedule == nil then
		AGS_Print("AGS_Survival_StartCosmeticTimer-Scheduler-Error")
		return
	end
	
	-- Start countdown.
	--if not Timer_Exists(AGS_SURVIVAL_TIMER) then	
	Timer_Start(AGS_SURVIVAL_TIMER, current_schedule.Interval)
	--end
	AGS_Survival_UpdateObjective()
end

function AGS_Survival_OnCosmeticTick()
	AGS_Survival_UpdateObjective()
end

function AGS_Survival_RemoveObjective()
	AGS_Objectives_Set(AGS_SURVIVAL_OBJECTIVE, nil, false)
end