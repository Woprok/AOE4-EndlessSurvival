---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Contains additional match support created by relic that is currently not expected to be rewritten.
---------------------------------------------------------------------------------------------------

-- Replay System.
import("replay/replaystatviewer.scar")
-- Notification system.
import("gameplay/event_cues.scar")
-- Age UI.
import("gameplay/currentageui.scar")
-- Chinese Dynasty UI.
import("gameplay/chi/current_dynasty_ui.scar")
-- Score UI.
import("gameplay/score.scar")
-- Cheat support for dev mode.
import("gameplay/cheat.scar") 
-- Tutorial goals available to new players.
-- import("training/coretraininggoals.scar")
-- import("training/frenchtraininggoals.scar")
-- import("training/englishtraininggoals.scar")
-- import("training/sultanatetraininggoals.scar")
-- import("training/rustraininggoals.scar")
-- import("training/mongoltraininggoals.scar")
-- import("training/chinesetraininggoals.scar")
-- import("training/abbasidtraininggoals.scar")

---------------------------------------------------------------------------------------------------
-- Options:
-- Relic uses in code behind certain options, that can be set and will then apply their effect.
-- This is list of all options that we were able to reverse engineer.
---------------------------------------------------------------------------------------------------
-- section_inner_win_conditions
--	 	option_win_condition_conquest
--	 	option_win_condition_religious
--	 	option_win_condition_wonder
-- section_diplomacy
--	 	option_diplomacy_teams (Refers to option called Locked Teams)
--	 	option_diplomacy_tribute
-- section_endgame (Allow / disallow spectating after elimination. Most likely not working at all.)
--		option_allow_spectators
-- section_starting_conditions
-- 		reveal_fow_on_elimination (Exact path is used for Core_RevealFOWOnEliminationEnabled, required by default winconditions)
--		option_fow[option_fow_concealed, option_fow_explore, option_fow_reveal]
--		option_score
-- 		option_start_age[option_start_nomad, option_start_age_1, option_start_age_2, option_start_age_3, option_start_age_4]
--		option_vision[option_vision_default]
--		option_speed[option_speed_2x, option_speed_3x, option_speed_20x, option_speed_50x, option_speed_100x]
--		option_initial_units[initial_units_none, initial_units_standard]
--		option_resources[resources_standard, resources_high, resources_very_high, resources_max] (Automatically binded by statetree)
--		option_timer[option_timer_reset]
---------------------------------------------------------------------------------------------------

AGS_UTILITIES_MODULE = "AGS_Utilities"

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_UTILITIES_MODULE)	

function AGS_Utilities_UpdateModuleSettings()
	AGS_Print("AGS_Utilities_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.EnableUtilities then
		Core_UnregisterModule(AGS_UTILITIES_MODULE)
	end
end

function AGS_Utilities_AdjustSettings()
	AGS_Print("AGS_Utilities_AdjustSettings")
	-- Set player behaviour when eliminated.
	_allow_spectators = AGS_GLOBAL_SETTINGS.AllowLoserSpectation
end

function AGS_Utilities_LateInitializations()
	AGS_Print("AGS_Utilities_LateInitializations")	
	AGS_Utilities_StandardReplay()	
end

function AGS_Utilities_OnPlay()
	AGS_Print("AGS_Utilities_OnPlay")	
	AGS_Utilities_StandardReplayCallbacks()	
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------
-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Religious_UpdatePlayerStats(player, scarModel)	
	if AGS_RELIGIOUS_SACRED_SITE_OBJECTIVES ~= nil then
		scarModel.Relics_Target = #AGS_RELIGIOUS_SACRED_SITE_OBJECTIVES
	else
		scarModel.Relics_Target = 0
	end
	scarModel.Relics_Current = AGS_Religious_CountSitesControlled(player)
end
-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Conquest_UpdatePlayerStats(player, scarModel)
	local conquerables = AGS_Conquest_GetPlayerConquerableCount(player)
	if conquerables == nil then
		conquerables = {
			built = 0,
			remaining = 0,
		}
	end
	scarModel.Conquest_Target = conquerables.built
	scarModel.Conquest_Current = conquerables.remaining
end
-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Wonder_UpdatePlayerStats(player, scarModel)	
	if not player.isEliminated and player.AGS_Wonder.entity_uwid ~= nil then 
		if player.AGS_Wonder.is_alive and Timer_Exists(player.AGS_Wonder.objective_timer) then 
			scarModel.Wonder_Target = AGS_WONDER_VICTORY_TIME 								
			scarModel.Wonder_Current = Timer_GetRemaining(player.AGS_Wonder.objective_timer) 	
			return
		elseif Entity_IsValid(player.AGS_Wonder.entity_uwid) then
			local entity = Entity_FromID(player.AGS_Wonder.entity_uwid)
			if entity ~= nil and Entity_GetBuildingProgress(entity) < 1.0 then
				scarModel.Wonder_Target = AGS_WONDER_VICTORY_TIME 	
				-- 0 : under construction
				scarModel.Wonder_Current = 0 					
				return
			end
		end
	end
	scarModel.Wonder_Target = 0 	-- in sec
	scarModel.Wonder_Current = -1 	-- in sec	-1 : not constructed
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- Initialize replay stats
function AGS_Utilities_StandardReplay()
	if AGS_GLOBAL_SETTINGS.Conquest then
		ReplayStatViewer_PopulateReplayStatTabs({"ConquestTrackerTemplate"})
	end
	if AGS_GLOBAL_SETTINGS.Religious then
		ReplayStatViewer_PopulateReplayStatTabs({"ReligiousTrackerTemplate"})
	end
	if AGS_GLOBAL_SETTINGS.Wonder then
		ReplayStatViewer_PopulateReplayStatTabs({"WonderTrackerTemplate"})
	end
	ReplayStatViewer_PopulateReplayStatTabs({"CurrentResourcesTemplate", "IncomeTemplate", "MilitaryTemplate"})	
end

-- Initialize replay stats
function AGS_Utilities_StandardReplayCallbacks()
	if AGS_GLOBAL_SETTINGS.Conquest then
		ReplayStatViewer_RegisterPlayerDataContextUpdater(Conquest_UpdatePlayerStats)
	end
	if AGS_GLOBAL_SETTINGS.Religious then
		ReplayStatViewer_RegisterPlayerDataContextUpdater(Religious_UpdatePlayerStats)
	end
	if AGS_GLOBAL_SETTINGS.Wonder then
		ReplayStatViewer_RegisterPlayerDataContextUpdater(Wonder_UpdatePlayerStats)
	end
end