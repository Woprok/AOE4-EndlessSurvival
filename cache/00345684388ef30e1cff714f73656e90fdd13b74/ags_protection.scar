---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Protection win condition.
-- Players are required to protect specified buildings, generally 1.
-- Buildings are always passed to next available human player.
-- All players are forced to be allies.
-- This makes some additional assumptions such as single team game, ignores FFA etc..
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_protection_data.scar")
AGS_PROTECTION_MODULE = "AGS_Protection"
AGS_PROTECTION_OBJECTIVE = nil
AGS_PROTECTION_ACTIVE = true
AGS_PROTECTION_STRUCTURES_REQUIRED = 1
AGS_PROTECTION_TICK_WAIT = 0.25 -- 0.125 is a single tick
AGS_PROTECTION_ENTITY_BLUEPRINT_TYPE = "dc9c718459894f58869e73a73f33effc:building_command_center"
AGS_PROTECTION_PROTECTABLES_OWNER = nil
AGS_PROTECTION_PROTECTABLES = {}
AGS_BP_COMMAND_CENTER = "command_center"
---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_PROTECTION_MODULE)

function AGS_Protection_AdjustSettings()
	AGS_Print("AGS_Protection_AdjustSettings")
	if AGS_GLOBAL_SETTINGS.Protection then
		-- Check if we have access to blueprint ?
		AGS_GLOBAL_SETTINGS.Protection = EBP_Exists(AGS_PROTECTION_ENTITY_BLUEPRINT_TYPE)
		AGS_Print("AGS_Protection_AdjustSettings-Current", AGS_GLOBAL_SETTINGS.Protection)
	end
end

function AGS_Protection_UpdateModuleSettings()
	AGS_Print("AGS_Protection_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Protection then
		Core_UnregisterModule(AGS_PROTECTION_MODULE)
	end
end

function AGS_Protection_PresetExecute()
	AGS_Print("AGS_Protection_PresetExecute")
	AGS_Protection_CreateProtectedEntity()
end

function AGS_Protection_OnPlay()
	AGS_Print("AGS_Protection_OnPlay")
	AGS_Protection_StartPeace()
	--AGS_Protection_InitializeProtectables()
	Rule_AddGlobalEvent(AGS_Protection_OnDamageReceived, GE_DamageReceived)
	Rule_AddGlobalEvent(AGS_Protection_OnEntityKilled, GE_EntityKilled)
	Rule_AddGlobalEvent(AGS_Protection_OnEntityLandmarkDestroyed, GE_EntityLandmarkDestroyed)
	AGS_Protection_CreateObjective()
	AGS_Protection_UpdateObjective()
end

function AGS_Protection_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_Protection_OnPlayerDefeated")
	if reason == AGS_WR_PROTECTION then 
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_PROTECTION)
		if AGS_Protection_SurvivedAllWaves() then
			AGS_Conditions_CheckVictory(AGS_PROTECTION_ACTIVE, AGS_Presentations_VictoryProtection, AGS_WR_PROTECTION,
				AGS_Objectives_PresentWrap(
					AGS_PROTECTION_OBJECTIVE, 
					OS_Complete, 
					AGS_OBJECTIVES_PROTECTION.title_victory))
		end
	else
		AGS_Protection_SwapProtection(player)
	end
	AGS_Protection_UpdateObjective()
end

function AGS_Protection_OnRelationshipChanged(observer_id, target_id)
	AGS_Print("AGS_Protection_OnRelationshipChanged")
	AGS_Protection_UpdateObjective()
end

function AGS_Protection_OnObjectiveToggle(toggle)
	AGS_Print("AGS_Protection_OnObjectiveToggle")
	if AGS_PROTECTION_OBJECTIVE ~= nil then
		AGS_Objectives_Set(AGS_PROTECTION_OBJECTIVE, nil, toggle)	
	end
end

function AGS_Protection_OnGameOver()
	AGS_Print("AGS_Protection_OnGameOver")
	Rule_RemoveGlobalEvent(AGS_Protection_OnDamageReceived)
	Rule_RemoveGlobalEvent(AGS_Protection_OnEntityKilled)
	Rule_RemoveGlobalEvent(AGS_Protection_OnEntityLandmarkDestroyed)
	AGS_Protection_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------
-- Entity destroyed for all non-landmarks.
function AGS_Protection_OnEntityKilled(context)
	if context.victimOwner == nil or context.victim == nil then
		return
	end
	local player = Core_GetPlayersTableEntry(context.victimOwner)
	local entity_id = context.victim
	local killer = nil
	if context.killer ~= nil and not World_OwnsEntity(entity_id) then
		killer = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(entity_id))
	end
	AGS_Protection_ProtectableDestroyed(player, entity_id, killer)
end
-- Entity landmark destroyed
function AGS_Protection_OnEntityLandmarkDestroyed(context)
	if context.landmarkOwner == nil or context.landmarkEntity == nil then
		return
	end
	local player = Core_GetPlayersTableEntry(context.landmarkOwner)
	local entity_id = context.landmarkEntity
	AGS_Protection_ProtectableDestroyed(player, entity_id)
end
-- Deal with rebuilding of landmarks and notification about objective under attack.
function AGS_Protection_OnDamageReceived(context)	
	-- Ignore nils and world owned entities
	if context == nil  or context.victim == nil or World_OwnsEntity(context.victim) then
		return 
	end
	-- Get building ID and owner
	local entity_uwid = Entity_GetID(context.victim)
	local owner = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(context.victim))	
	-- Excludes everythng that is not tracked by wincondition.
	if not AGS_Protection_IsProtectable(context.victim) then
		return
	end	
	-- Owner must always have this landmark registered for us to do anything with it ?
	if AGS_PROTECTION_PROTECTABLES[entity_uwid] == nil then
		return
	end
	
	-- If building is being repaired (also triggers OnDamageReceived) we will check if its landmark and return
	if context.isRepairing then		
		-- Just update objective if needed
		-- AGS_Protection_UpdateObjective()
		return		
	end
	
	-- Excludes razing buildings as they do not have an attacker ?
	-- Builder and attacker can't be world owned.
	local attacker = nil 
	if context.attacker == nil or World_OwnsEntity(context.attacker) then 
		-- HACK attacker for world owned entities is owner
		attacker = owner	 
	else
		attacker = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(context.attacker))		
	end
	
	-- Exclude scuttling of incomplete buildings.
	if Entity_IsBuilding(context.victim) and Entity_GetBuildingProgress(context.victim) < 1.0 then
		return
	end	
	-- Notifications are skipped if entity is dead as we are only informing of them to take damage.
	if not owner.AGS_Protectables[entity_uwid].is_alive then	
		return
	end
	AGS_Notifications_Damaged(entity_uwid, attacker, owner, AGS_NOTIFICATIONS_PROTECTION_ATTACKED)
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

-- TODO figure out if waves were all killed.
function AGS_Protection_SurvivedAllWaves()
	return false
end

function AGS_Protection_CreateObjective()
	AGS_PROTECTION_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_PROTECTION, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_PROTECTION_OBJECTIVE, OS_Incomplete, true, true, COUNTER_CountUpTo)
end

function AGS_Protection_UpdateObjective()
	if AGS_PROTECTION_OBJECTIVE == nil then 
		return
	end
	local protectables_statistics = AGS_Protection_GetProtectableCount()
	if protectables_statistics == nil then 
		AGS_Objectives_Set(AGS_PROTECTION_OBJECTIVE, nil, nil, false)
		return
	else
		AGS_Objectives_Set(AGS_PROTECTION_OBJECTIVE, nil, nil, true)
	end
	-- Update the progress bar of the objective. Starts at maximum.
	AGS_Objectives_Progress(
		AGS_PROTECTION_OBJECTIVE, 
		protectables_statistics.remaining, 
		protectables_statistics.built, 
		protectables_statistics.remaining / protectables_statistics.built
	)
end

function AGS_Protection_RemoveObjective()
	AGS_Objectives_Set(AGS_PROTECTION_OBJECTIVE, nil, false)
end
-- This is similiar to treaty, but without timer and notify.
function AGS_Protection_StartPeace()
	AGS_Print("AGS_Protection_StartPeace")
	-- Disables fighting between players via diplomacy.	
	if AGS_GLOBAL_SETTINGS.ProtectionSettings.ChangeRelations then
		AGS_Protection_DisableFighting()
	end
	AGS_Print("AGS_Treaty_StartPeace-Over")
end
-- Supplements peace
function AGS_Protection_DisableFighting()
	Diplomacy_AllPlayer_SaveAndChangeToFriends()
	Diplomacy_OverrideAllPlayerDiplomacySettings(AGS_GLOBAL_SETTINGS.Tributes, false)
end

function AGS_Protection_Eliminate(player)
	-- Finish off all undestroyed objectives that are not yet acting as killed e.g. landmarks ?
	AGS_Protection_KillAllProtectables(player)
	-- Finally eliminate.
	AGS_SetPlayerDefeated(
		player.id, 
		AGS_Presentations_LossProtection, 
		AGS_WR_PROTECTION,
		AGS_Objectives_PresentWrap(
			AGS_PROTECTION_OBJECTIVE, 
			OS_Failed, 
			AGS_OBJECTIVES_PROTECTION.title_lost))
end

function AGS_Protection_EliminateGroup(player)
	-- Eliminate teammates as they were leaching on this player at this moment.
	local teammates = AGS_Teams_GetAllCurrentTeammates(player)
	AGS_SetPlayerGroupDefeated(teammates, 
		AGS_Presentations_LossProtection, 
		AGS_WR_PROTECTION,
		AGS_Objectives_PresentWrap(
			AGS_PROTECTION_OBJECTIVE, 
			OS_Failed, 
			AGS_OBJECTIVES_PROTECTION.title_lost))
end


-- Create entities in middle or whatver position of the map that are being protected
function AGS_Protection_CreateProtectedEntity()
	AGS_Print("AGS_Protection_CreateProtectedEntity")	
	
	local next_owner = AGS_Protection_NextHuman()
	if next_owner == nil then
		AGS_Print("AGS_Protection_CreateProtectedEntity-NoneLeftFail")			
		return
	end	
	AGS_PROTECTION_PROTECTABLES_OWNER = next_owner.id
	-- Continue to spawn, step by step
	local ebp_building = BP_GetEntityBlueprint(AGS_PROTECTION_ENTITY_BLUEPRINT_TYPE)
	local owner_id = next_owner.id		
	local ename = AGS_EGroupName(owner_id, AGS_BP_COMMAND_CENTER)
	local egroup = EGroup_CreateIfNotFound(ename)
	local center = World_Pos(0, World_GetHeightAt(0, 0), 0)		
	local center_facing = World_Pos(0, World_GetHeightAt(0, 5), 5)	
	
	Util_CreateEntities(owner_id, egroup, ebp_building, center, 1, center_facing, false, false)
	
	AGS_Protection_InitializeProtectables(egroup)
	
	EGroup_Destroy(egroup)
end

-- Swaps ownership of all protectables to next human player.
function AGS_Protection_SwapProtection(eliminated_player)
	AGS_Print("AGS_Protection_SwapProtection")	
	if AGS_PROTECTION_PROTECTABLES_OWNER ~= eliminated_player.id then
		return
	end
	if not AGS_Conditions_IsAnyHumanAlive() then
		AGS_Print("AGS_Protection_SwapProtection-NoneLeftCheck")		
		return
	end
	local next_owner = AGS_Protection_NextHuman()
	if next_owner == nil then
		AGS_Print("AGS_Protection_SwapProtection-NoneLeftFail")			
		return
	end
	
	AGS_PROTECTION_PROTECTABLES_OWNER = next_owner.id
	-- Change ownership
	for entity_uwid, data in pairs(AGS_PROTECTION_PROTECTABLES) do
		if data.is_alive then
			Entity_SetPlayerOwner(entity_uwid, next_owner.id)	
		end
	end	
end

function AGS_Protection_KillAllProtectables(player)
	-- Disable landmark rebuilt prompt.
	Player_SetStateModelBool(player.id, "disable_landmark_rebuild", true)
	for _, protectable in pairs(player.AGS_Protectables) do 
		if protectable.is_alive then
			protectable.is_alive = false
			if protectable.entity ~= nil and Entity_IsAlive(protectable.entity) then
				Entity_Kill(protectable.entity)
			end
		end
	end	
end

function AGS_Protection_InitializeProtectables(eg_protectables)
	-- Setter	
	local AGS_TrackProtectable = function(gid, idx, eid)
		local entity_uwid = Entity_GetID(eid)
		AGS_PROTECTION_PROTECTABLES[entity_uwid] = {
			entity = eid,
			is_alive = Entity_IsAlive(eid),
		}
	end
	-- Function execution
	EGroup_ForEach(eg_protectables, AGS_TrackProtectable)
end

---------------------------------------------------------------------------------------------------
-- Protection Checks:
---------------------------------------------------------------------------------------------------

function AGS_Protection_ProtectableDestroyed(player, entity_id, killer)
	-- Check if the player is alive and building also exists. Eliminated players are dealt with separately.
	if player == nil or player.isEliminated or entity_id == nil then
		return
	end	
	-- Check if we received entity that we are actively tracking.
	if not AGS_Protection_IsProtectable(entity_id) then
		return
	end		
	-- Retrieve id and check if it exists
	local entity_uwid = Entity_GetID(entity_id)	
	if AGS_PROTECTION_PROTECTABLES[entity_uwid] == nil then
		return
	end
	-- Update status to reflect that we consider it dead. Hopefully game does never pretend it to be alive on entity killed.
	AGS_PROTECTION_PROTECTABLES[entity_uwid].is_alive = false
		
	-- Notify players about protectable being destroyed.
	AGS_Notifications_Destroyed(entity_uwid, player, killer, AGS_NOTIFICATIONS_PROTECTION_DESTROYED)
	-- Update objective as we changed at least one condition target.
	AGS_Protection_UpdateObjective()	
		
	-- Verify that this player is still able to continue in his protection. (basically everyone)
	local protectable_count = AGS_Protection_GetProtectableCount()
	
	-- Check if player still has reason to be in protection game.	
	if protectable_count.built > 0 and protectable_count.remaining <= 0 then
		if AGS_GLOBAL_SETTINGS.ProtectionSettings.IsTeamShared then
			AGS_Protection_EliminateGroup(player)	
		end
	
		-- Continue and eliminate player, finishing him off.
		AGS_Protection_Eliminate(player)
	end		
end

---------------------------------------------------------------------------------------------------
-- Helpers:
---------------------------------------------------------------------------------------------------

function AGS_Protection_GetProtectableCount()
	local protectables = {
		built = 0,
		remaining = 0,
		destroyed = 0,
	}	
	
	-- Evaluate all protectables.
	for _, protectable in pairs(AGS_PROTECTION_PROTECTABLES) do
		protectables.built = protectables.built + 1
		if protectable.is_alive then 
			protectables.remaining = protectables.remaining + 1
		else 
			protectables.destroyed = protectables.destroyed + 1
		end
	end
	return protectables
end

-- Returns if passed entity is protectable objective.
function AGS_Protection_IsProtectable(entity_id)
	--not Entity_HasBlueprint(entity_id, AGS_BP_BUILDING) or 
	if Entity_HasBlueprint(entity_id, AGS_PROTECTION_ENTITY_BLUEPRINT_TYPE) then
		return true
	end
	return false
end

function AGS_Protection_NextHuman()
	for _, player in pairs(PLAYERS) do
		if not player.isEliminated and Player_IsHuman(player.id) then
			AGS_Print("AGS_Protection_NextHuman", player.id)	
			return player
		end
	end	
	return nil
end