---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Wrapper around settled style, that creates walls.
---------------------------------------------------------------------------------------------------

AGS_FORTIFIED_MODULE = "AGS_Fortified"
-- Constantrs for square fortification.
AGS_FORTIFIED_CORNERS = {
	LeftTop = { x = 60, z = 60 },
	RightTop = { x = 60, z = -60 },
	RightBot = { x = -60, z = -60 },
	LeftBot = { x = -60, z = 60 },
	LeftTopStep = { x = 0, z = -1 },
	RightTopStep = { x = -1, z = 0 },
	RightBotStep = { x = 0, z = 1 },
	LeftBotStep = { x = 1, z = 0 },
	WallLength = 120, -- Determined by this table, too lazy to make it completely dynamic.
	StepCount = 12, -- Equals WallLength/StepSize.
	StepSize = 10,
	GateMiddleTop = { x = 60, z = 0 },
	GateMiddleBot = { x = -60, z = 0 },
	GateMiddleRight = { x = 0, z = -60 },
	GateMiddleLeft = { x = 0, z = 60 },
}

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_FORTIFIED_MODULE)	

function AGS_Fortified_UpdateModuleSettings()
	AGS_Print("AGS_Fortified_UpdateModuleSettings")
	if AGS_GLOBAL_SETTINGS.Settlement ~= AGS_GS_SETTLEMENT_FORTIFIED then
		Core_UnregisterModule(AGS_FORTIFIED_MODULE)
	end
end

function AGS_Fortified_PresetExecute()
	AGS_Print("AGS_Fortified_PresetExecute")
	-- Callback to parent.
	AGS_Settled_PresetExecute()
end

function AGS_Fortified_OnStarting()
	AGS_Print("AGS_Fortified_OnStarting")
	-- Attempt to create something other than a cheese.
	AGS_Fortified_CreateWalls()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- Last time this was tested it would not work very well with stone walls.
function AGS_Fortified_CreateWalls()
	for _, player in pairs(PLAYERS) do
		if player.raceName ~= AGS_CIV_MONGOL then
			local palisade_blueprint = AGS_GetCivilizationEntity(player.raceName, AGS_BP_PALISADE)
			local palisade_gate_blueprint = AGS_GetCivilizationEntity(player.raceName, AGS_BP_PALISADE_GATE)
			local spawn_position = AGS_Starts_GetStartPosition(player.id)			
			AGS_Fortified_WallAroundPosition(player, palisade_blueprint, palisade_gate_blueprint, spawn_position)
		end		
	end	
end

function AGS_Fortified_WallAroundPosition(player, wall_bp, gate_bp, center_position)
	-- New vars
	local step_size = AGS_FORTIFIED_CORNERS.StepSize
	local step_count = AGS_FORTIFIED_CORNERS.StepCount
	-- Wall helper funcs
	local AGS_Fortified_Wall = function(idx_end, corner, step)
		local start_at = World_Pos(0, 0, 0)
		local close_at = World_Pos(0, 0, 0)
		start_at = AGS_Fortified_StartCoordinates(center_position, corner)
		for i=1, idx_end do 
			close_at = AGS_Fortified_AdjustCoordinates(start_at, step, step_size)
			LocalCommand_PlayerPlaceAndConstructSlottedSplinePlanned(player.id, wall_bp, start_at, close_at, false, false)
			start_at = close_at
		end
	end
	local AGS_Fortified_Construct = function(gid, idx, eid)
		Entity_ForceSelfConstruct(eid)
	end
	--local AGS_Fortified_Gate = function(corner, x_off, z_off)
	--	local start_at = AGS_Fortified_StartCoordinates(center_position, corner)
	--	local face_at = AGS_CalculateCenterOffset(start_at, x_off, z_off)
	--	LocalCommand_PlayerPlaceAndConstructEntitiesPlanned(player.id, gate_bp, start_at, face_at, false, false)
	--end
	-- left top corner
	AGS_Fortified_Wall(step_count, AGS_FORTIFIED_CORNERS.LeftTop, AGS_FORTIFIED_CORNERS.LeftTopStep)
	-- right top corner
	AGS_Fortified_Wall(step_count, AGS_FORTIFIED_CORNERS.RightTop, AGS_FORTIFIED_CORNERS.RightTopStep)
	-- right bot corner
	AGS_Fortified_Wall(step_count, AGS_FORTIFIED_CORNERS.RightBot, AGS_FORTIFIED_CORNERS.RightBotStep)
	-- left bot corner
	AGS_Fortified_Wall(step_count, AGS_FORTIFIED_CORNERS.LeftBot, AGS_FORTIFIED_CORNERS.LeftBotStep)
	-- construct 
	local walls = Player_GetEntitiesFromType(player.id, AGS_BP_ANY_WALL)
	EGroup_ForEach(walls, AGS_Fortified_Construct)
	
	-- middle top
	--AGS_Fortified_Gate(AGS_FORTIFIED_CORNERS.GateMiddleTop, 10, 0)
	-- middle bot
	--AGS_Fortified_Gate(AGS_FORTIFIED_CORNERS.GateMiddleBot, 10, 0)
	-- middle right
	--AGS_Fortified_Gate(AGS_FORTIFIED_CORNERS.GateMiddleRight, 0, 10)
	-- middle left
	--AGS_Fortified_Gate(AGS_FORTIFIED_CORNERS.GateMiddleLeft, 0, 10)
	-- construct
	--local gates = Player_GetEntitiesFromType(player.id, AGS_BP_ANY_GATE)
	--EGroup_ForEach(gates, AGS_Fortified_Construct)
end


function AGS_Fortified_StartCoordinates(spawn, corner)
	-- start corner coordinates
	local x_str = spawn.x + corner.x
	local z_str = spawn.z + corner.z
	return World_Pos(x_str, World_GetHeightAt(x_str, z_str), z_str)
end

function AGS_Fortified_AdjustCoordinates(start, step, step_size)
	local x_end = start.x + step.x * step_size
	local z_end = start.z + step.z * step_size	
	return World_Pos(x_end, World_GetHeightAt(x_end, z_end), z_end)
end