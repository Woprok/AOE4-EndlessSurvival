---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Tech demo for survival
---------------------------------------------------------------------------------------------------

AGS_SURVIVAL_TEST_MODULE = "AGS_SurvivalTest"
-- Each unit represents single key
AGS_SURVIVAL_TEST_UNITS = {
	-- Each spawnable unit follows same definition.
	-- bp is for blueprint, 
	-- cost is value of a unit, 
	-- min_wave is first wave it can be used from
	-- weight is how much it should favor spawning this unit if possible, higher is better
	-- key that is used as identifier
	-- always keep here at least one unit with cost of 1
	[1] = { bp = "dc9c718459894f58869e73a73f33effc:spearzombie", cost = "1", min_wave = 1, weight = 1 }
}
AGS_BP_WAVE_NAME = "AGS_Survival_Wave"
---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_SURVIVAL_TEST_MODULE)	

function AGS_SurvivalTest_UpdateModuleSettings()
	AGS_Print("AGS_SurvivalTest_UpdateModuleSettings")
	--if not AGS_GLOBAL_SETTINGS.PLACEHOLDER.PLACEHOLDER_VALUE then
	--	Core_UnregisterModule(AGS_SURVIVAL_TEST_MODULE)
	--end
end

function AGS_SurvivalTest_EarlyInitializations()
	AGS_Print("AGS_SurvivalTest_EarlyInitializations")
	--AGS_SurvivalTest_RemoveMapSacredSites()
end

function AGS_SurvivalTest_PresetExecute()
	AGS_Print("AGS_SurvivalTest_PresetExecute")
	AGS_SurvivalTest_GetSpawnPoints()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
function AGS_SurvivalTest_NewWave(start_position)
	local player_id = AGS_GetNextHuman().id
	local target_position =  World_Pos(0,World_GetHeightAt(0,0),0)
	local current_wave = 1
	local current_wave_cost = 25
	
	AGS_SurvivalTest_SpawnWave(player_id, start_position, target_position, current_wave, current_wave_cost)
end

function AGS_SurvivalTest_SpawnWave(player_id, start_position, target_position, current_wave, current_wave_cost)
	local wave_composition = AGS_SurvivalTest_RandomArmy(current_wave_cost, current_wave)
	for key, count in pairs(wave_composition) do
		AGS_SurvivalTest_SpawnUnitGroup(player_id, start_position, target_position, AGS_SURVIVAL_TEST_UNITS[key].bp, count)
	end
end

-- Units are spawned to first human in the game.
function AGS_SurvivalTest_SpawnUnitGroup(initiator_id, spawn_position, target_position, unit_bp_name, unit_count)
	local sbp_unit = BP_GetSquadBlueprint(unit_bp_name)
	local sname = AGS_SGroupName(player.id, AGS_BP_WAVE_NAME)		
	local sgroup = SGroup_CreateIfNotFound(sname)
	-- Spawn
	UnitEntry_DeploySquads(initiator_id, sgroup, {{sbp = sbp_unit, numSquads = unit_count}}, spawn_position)
	
	-- Transfer & Command
	Cmd_AttackMove(sgroup, target_position)
	SGroup_SetWorldOwned(sgroup)
	-- Icon
	SGroup_ForEach(sgroup, AGS_Survival_AddIcon)
	
	-- Clean
	SGroup_Destroy(sgroup)
end

function AGS_Survival_AddIcon(gid, idx, sid)
	MapIcon_CreateSquad(sid, "icons\\minimap\\military_route_neutral", 0.15, 1, 1, 1, 1)
end

-- Creates army based on cost and weights. Returns key, count table.
function AGS_SurvivalTest_RandomArmy(max_cost, max_wave)
	if max_cost < 1 then
		max_cost = 1
	end
	local current_cost = 0
	-- key of the unit and then count
	local final_army = { }
	
	while current_cost < max_cost do
		local remaining_cost = max_cost - current_cost
		local unit_key, unit_cost = AGS_SurvivalTest_GetRandomUnit(remaining_cost, max_wave)
		current_cost = current_cost + unit_cost
		-- increment or add
		if final_army[unit_key] ~= nil then
			final_army[unit_key] = final_army[unit_key] + 1
		else
			final_army[unit_key] = 1
		end
	end
	
	return final_army	
end
-- Returns key from unit table and it's cost as that will be immediately used
function AGS_SurvivalTest_GetRandomUnit(max_unit_cost, max_wave)
	-- chances
	local total_weight = 0
	for _, data in pairs(AGS_SURVIVAL_TEST_UNITS) do 
		if max_unit_cost <= data.cost and max_wave >= data.wave then
			total_weight = total_weight + data.weight
		end
	end
	-- rng (this must synchronize)
	local final_weight = World_GetRand(0, total_weight)
	-- retrieve unit
	for key, data in pairs(AGS_SURVIVAL_TEST_UNITS) do 
		if max_unit_cost <= data.cost and max_wave >= data.wave then
			final_weight = final_weight - data.weight
			if final_weight <= 0 then
				return key, data.cost
			end			
		end
	end
	-- if this failed return unit in the table under key 1
	return 1, AGS_SURVIVAL_TEST_UNITS[1]
end

function AGS_SurvivalTest_GetSpawnPoints()	
	local all_prefab_sites = EGroup_CreateUnique()
	World_GetBlueprintEntities(AGS_GetNeutralEntity(AGS_BP_SACRED_SITE), all_prefab_sites)
	for i = 1, EGroup_CountSpawned(all_prefab_sites) do
		local eid = EGroup_GetSpawnedEntityAt(all_prefab_sites, i)
		if eid ~= nil and Entity_IsSpawned(eid) then
			local position = Entity_GetPosition(eid)
			AGS_SurvivalTest_NewWave(position)
		end
	end
end

function AGS_SurvivalTest_CreateCentralSite()
	-- Create city point
	local ebp_site = AGS_GetNeutralEntity(AGS_BP_SACRED_SITE)
	local city_entity_id = AGS_SurvivalTest_CreateEntity(ebp_site, World_Pos(0, World_GetHeightAt(0, 0), 0))
end