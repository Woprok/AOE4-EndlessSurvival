---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Culture win condition.
-- Players (or Teams) use Monks to capture Strategic Points around the map.
-- When the player or team captures majority of Cities, they win the match.
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_culture_data.scar")
AGS_CULTURE_MODULE = "AGS_Culture"
AGS_CULTURE_ACTIVE = true
AGS_CULTURE_OBJECTIVE = nil
AGS_CULTURE_SACRED_SITE_OBJECTIVES = { }
-- Holds group that contains all sites, used only during initialization.
AGS_CULTURE_SACRED_SITE_EGROUP = nil
-- Player that last captured majority of states sacred sites.
AGS_CULTURE_LAST_MAJORITY_CAPTURER = nil
-- Radius for capturing or decapturing site.
AGS_CULTURE_CONVERSION_RADIUS = 10.0
AGS_CULTURE_VISION_RADIUS = 12
AGS_CULTURE_PROGRESS_MIN = 0.00
AGS_CULTURE_PROGRESS_MAX = 1.00
-- One frame is 0.125, this should be defined in frame count.
AGS_CULTURE_CHECK_FREQUENCY = 0.125
-- Progress % required for victory.
AGS_CULTURE_VICTORY_THRESHOLD = 0.75
-- Progress % required for warning.
AGS_CULTURE_WARNING_THRESHOLD = 0.5

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_CULTURE_MODULE)	

function AGS_Culture_UpdateModuleSettings()
	AGS_Print("AGS_Culture_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Culture then
		Core_UnregisterModule(AGS_CULTURE_MODULE)
	end
end

function AGS_Culture_PresetFinalize()
	AGS_Print("AGS_Culture_PresetFinalize")
	-- Create new group and allocate all sacred sites to it. If group is empty unload this module.
	AGS_CULTURE_SACRED_SITE_EGROUP = EGroup_CreateUnique()
	World_GetBlueprintEntities(AGS_GetNeutralEntity(AGS_BP_SACRED_SITE), AGS_CULTURE_SACRED_SITE_EGROUP)	
	if EGroup_CountSpawned(AGS_CULTURE_SACRED_SITE_EGROUP) == 0 then
		Core_UnregisterModule(AGS_CULTURE_MODULE)
		return	
	end
end

function AGS_Culture_OnPlay()
	AGS_Print("AGS_Culture_OnPlay")
	AGS_Culture_CreateSiteData()
	Rule_AddGlobalEvent(AGS_Culture_OnStrategicPointChanged, GE_StrategicPointChanged)
	AGS_Culture_CreateObjective()
	AGS_Culture_UpdateObjective()
	-- Updates progress of state capture, initialized last.
	Rule_AddInterval(AGS_Culture_OnTimerTick, AGS_CULTURE_CHECK_FREQUENCY)
end

function AGS_Culture_TreatyStarted()
	AGS_Print("AGS_Culture_TreatyStarted")
	AGS_CULTURE_ACTIVE = false
	AGS_Culture_EnableSacredSitesCapture(AGS_CULTURE_ACTIVE)
end

function AGS_Culture_TreatyEnded()
	AGS_Print("AGS_Culture_TreatyEnded")
	AGS_CULTURE_ACTIVE = true
	AGS_Culture_EnableSacredSitesCapture(AGS_CULTURE_ACTIVE)
end

function AGS_Culture_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_Culture_OnPlayerDefeated")
	if reason == AGS_WR_CULTURE then 
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_CULTURE)
		AGS_Culture_TryDeclareWinners()
	end
end

function AGS_Culture_OnRelationshipChanged(observer_id, target_id)
	AGS_Print("AGS_Culture_OnRelationshipChanged")
	if AGS_CULTURE_OBJECTIVE == nil then
		return
	end
	AGS_Culture_UpdateObjective()
end

function AGS_Culture_OnGameOver()
	AGS_Print("AGS_Culture_OnGameOver")
	Rule_Remove(AGS_Culture_OnTimerTick)
	Rule_RemoveGlobalEvent(AGS_Culture_OnStrategicPointChanged)
	AGS_Culture_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------

function AGS_Culture_OnStrategicPointChanged(context)
	-- Check if squad is nil and exit function if there is no instigating squad, except for changeType CT_StartedRevertingCooldown (7)
	-- since that change type doesn't require a squad, and the squad can be nil when a squad dies within the capture radius.
	if context.instigatorSquad == nil and not context.changeType == 7 then
		print(string.format("Nil Squad for Holy Site Change Type %d", context.changeType))
		return
	end
	-- Sacred site changing owneship. (Note: this is too long resolution, so it will be at the end of file.)
	AGS_Culture_OnHolySiteChange(context)
end

function AGS_Culture_OnTimerTick()
	-- Determine current objective progress.
	AGS_Culture_UpdateSacredSiteObjectives()
	-- Update objectives
	AGS_Culture_UpdateObjective()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_Culture_CreateSiteData()
	for i = 1, EGroup_CountSpawned(AGS_CULTURE_SACRED_SITE_EGROUP) do
		local site = {
			entity_uwid = Entity_GetID(EGroup_GetSpawnedEntityAt(AGS_CULTURE_SACRED_SITE_EGROUP, i)),
			entity = EGroup_GetSpawnedEntityAt(AGS_CULTURE_SACRED_SITE_EGROUP, i),
			pos = Entity_GetPosition(EGroup_GetSpawnedEntityAt(AGS_CULTURE_SACRED_SITE_EGROUP, i)),
			player_last_capturing = nil,
			color_last_capturing = nil,
			progress = AGS_CULTURE_PROGRESS_MIN,
			objective = nil,
			flash = nil,
		}
		table.insert(AGS_CULTURE_SACRED_SITE_OBJECTIVES, site)
	end
end
-- This needs to disable it for treaties as it could lead to fast victory.
function AGS_Culture_EnableSacredSitesCapture(is_enabled)
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do 
		Entity_EnableStrategicPoint(site.entity, is_enabled) 
	end
end
-- Even through we have multiple objectives, we will consider them as one whenever we talk about them.
function AGS_Culture_CreateObjective() 
	AGS_CULTURE_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_CULTURE, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_CULTURE_OBJECTIVE, OS_Incomplete, true, true, COUNTER_CountUpTo)
	-- Create secondary from main objective template.
	local secondary_objective = AGS_Objectives_CreateFromCore(AGS_OBJECTIVES_CULTURE, AGS_OBJECTIVES_CULTURE_SECONDARY)
	for index, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do		
		site.objective = AGS_Objectives_Create(secondary_objective, AGS_GS_LOCAL_PLAYER, index, AGS_CULTURE_OBJECTIVE)
		AGS_Objectives_Set(site.objective, OS_Incomplete, false, true)
	end
end

function AGS_Culture_UpdateObjective()
	local sacred_count = math.ceil(#AGS_CULTURE_SACRED_SITE_OBJECTIVES * AGS_CULTURE_VICTORY_THRESHOLD)
	local sacred_team_count = AGS_Culture_CountSitesControlledTeam(AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Progress(AGS_CULTURE_OBJECTIVE, sacred_team_count, sacred_count, sacred_team_count / sacred_count)
end
-- This updates progress of all sites to match owning/capturing player color. Decapturing is not registred.
function AGS_Culture_UpdateSacredSiteObjectives()
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		-- This once iterated over every player... but it doesn't make sense unless this method lies.
		-- Only one team has progress higher than 0, so everyone else should have negative.  
		site.progress = Player_GetStrategicPointCaptureProgress(AGS_GS_LOCAL_PLAYER.id, site.entity)
		local state = nil
		if site.progress == -1 and AGS_Objectives_GetCurrentState(site.objective) == OS_Incomplete then 
			state = OS_Failed
			AGS_Objectives_Set(site.objective, nil, true)
		elseif site.progress == 1 and AGS_Objectives_GetCurrentState(site.objective) == OS_Incomplete then
			state = OS_Complete
			AGS_Objectives_Set(site.objective, nil, false)
		elseif site.progress == 0 then
			state = OS_Incomplete
			AGS_Objectives_Set(site.objective, nil, false)
		end			
		AGS_Objectives_SetColorProgress(site.objective, state, site.color_last_capturing, math.abs(site.progress))		
	end	
end

function AGS_Culture_RemoveObjective()
	AGS_Objectives_Set(AGS_CULTURE_OBJECTIVE, nil, false)
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do	
		AGS_Objectives_Set(site.objective, nil, false)
	end
end

-- Culture victory was triggered by a player obtaining majority of sites.
function AGS_Culture_VictoryTriggered()
	-- Stop the music.
	Music_PersistentStop()
	
	-- Eliminate all players that are not in his valid team.
	local losers = AGS_Teams_GetAllCurrentOpponents(AGS_CULTURE_LAST_MAJORITY_CAPTURER)
	if #losers > 0 then
		AGS_SetPlayerGroupDefeated(
			losers,
			AGS_Presentations_LossCulture, 
			AGS_WR_CULTURE,
			AGS_Objectives_PresentWrap(
				AGS_CULTURE_OBJECTIVE, 
				OS_Failed, 
				AGS_OBJECTIVES_CULTURE.title))
	else
		AGS_Culture_TryDeclareWinners()
	end
end

function AGS_Culture_TryDeclareWinners()
	AGS_Conditions_CheckVictory(AGS_CULTURE_ACTIVE, AGS_Presentations_VictoryCulture, AGS_WR_CULTURE,
		AGS_Objectives_PresentWrap(
			AGS_CULTURE_OBJECTIVE, 
			OS_Complete, 
			AGS_OBJECTIVES_CULTURE.title))
end

---------------------------------------------------------------------------------------------------
-- Helper Functions:
---------------------------------------------------------------------------------------------------

-- Returns true if all sites are controlled by same team of specified player/capturer.
function AGS_Culture_AreSitesThresholdControlled(threshold, player)
	local desired_count = (#AGS_CULTURE_SACRED_SITE_OBJECTIVES) * threshold
	if AGS_Culture_CountSitesControlledTeam(player) >= desired_count then
		return true	
	end			
	return false
end
-- Return count of sites under single team.
function AGS_Culture_CountSitesControlledTeam(player)
	local controlled = AGS_Culture_CountSitesControlled(player)
	for _, ally in pairs(AGS_Teams_GetAllCurrentTeammates(player)) do
		controlled = controlled + AGS_Culture_CountSitesControlled(ally)
	end
	return controlled	
end
-- Returns all sites owned by an player.
function AGS_Culture_CountSitesControlled(player)
	local controlled = 0
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		if not World_OwnsEntity(site.entity) and Entity_GetPlayerOwner(site.entity) == player.id then
			controlled = controlled + 1
		end
	end	
	return controlled	
end
-- Pings all Holy Sites once.
function AGS_Culture_HolySiteMinimapBlips()
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		-- Triggers a blip that corresponds to Holy Site owner's colour, so we verify that its owned by a player.
		if not World_OwnsEntity(site.entity) then
			UI_CreateMinimapBlipOnPosFrom(Entity_GetPlayerOwner(site.entity), site.pos, 5, "objective_holy_site")
		end
	end
end
-- Change site flashing on or off.
function AGS_Culture_SetSiteFlash(site, flashing)
	if flashing and not site.flash then		
		site.flash = UI_FlashObjectiveIcon(site.objective, true)
		UI_SetEntityDataContext(site.entity, {is_flashing = flashing})		
	else
		UI_StopFlashing(site.flash)
		site.flash = nil
		UI_SetEntityDataContext(site.entity, {is_flashing = flashing})		
	end
end
-- Determines if selected holy site position has monks nearby.
function AGS_Culture_HasContestingMonk(holy_site_pos)
	local sg_nearby = SGroup_CreateUnique()
	for _, player in pairs(PLAYERS) do
		World_GetSquadsNearPoint(player.id, sg_nearby, holy_site_pos, AGS_CULTURE_CONVERSION_RADIUS, OT_Player)
		SGroup_Filter(sg_nearby, { AGS_BP_MONK }, FILTER_KEEP)
		if SGroup_Count(sg_nearby) > 0 then
			return true
		end
	end		
end
---------------------------------------------------------------------------------------------------
-- Sacred Site Resolve Functions:
---------------------------------------------------------------------------------------------------
function AGS_Culture_OnHolySiteChange(context)	
	-- Get Holy Site position
	local holy_site_pos = Entity_GetPosition(context.strategicPointEntity)
	-- Get Holy Site progress - 0 to 1 for player/allies, 0 to -1 for enemies
	local holy_site_progress = Player_GetStrategicPointCaptureProgress(AGS_GS_LOCAL_PLAYER.id, context.strategicPointEntity)
	-- Get instigating player
	local instigating_player = nil 
	if context.instigatorSquad ~= nil then
		instigating_player = Core_GetPlayersTableEntry(Squad_GetPlayerOwner(context.instigatorSquad))
	end
	local site_entity_id = context.strategicPointEntity
	
	-- CT_Captured: If captured
	if context.changeType == 0 then
		AGS_Culture_OnHolySiteChangeTypeCapture(instigating_player, holy_site_pos, site_entity_id)
	-- CT_Reverting: If owned Holy Site is being neutralized
	elseif context.changeType == 1 then
		AGS_Culture_OnHolySiteChangeTypeNeutralizing(instigating_player, site_entity_id, holy_site_progress, holy_site_pos, context.strategicPointOwner)
	-- Currently not used CT_Secured: if secured.
	-- elseif context.changeType == 2 then
	-- CT_UnCaptured: If Holy Site is neutralized
	elseif context.changeType == 3 then
		AGS_Culture_OnHolySiteChangeTypeNeutralized(instigating_player, site_entity_id, holy_site_pos, context.strategicPointOwner)
	-- Currently not used CT_Seized: if siezed (triggered briefly between Uncaptured and StartedCapture)
	-- elseif context.changeType == 4 then
	-- CT_StartedCapture: If capture started/resuming
	elseif context.changeType == 5 then
		AGS_Culture_OnHolySiteChangeTypeContinue(instigating_player, site_entity_id, holy_site_progress, holy_site_pos)
	-- CT_StartedCooldown: If started cooldown (e.g. progress decrementing to 0 if Monk exits prior to capture)
	elseif context.changeType == 6 then
		AGS_Culture_OnHolySiteChangeTypeCooldown(site_entity_id)
	-- CT_StartedRevertingCooldown: If started reverting cooldown (e.g. enemy begins reverting and exits proximity)
	elseif context.changeType == 7 then
		AGS_Culture_OnHolySiteChangeTypeResume(site_entity_id)
	-- CT_Halted: If progress halted (e.g. enemy enters proximity while you are present)
	elseif context.changeType == 8 then
		AGS_Culture_OnHolySiteChangeTypeContested(instigating_player, site_entity_id, holy_site_progress, holy_site_pos)
	end	
end

function AGS_Culture_OnHolySiteChangeTypeResume(site_entity_id)
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		if site.entity == site_entity_id then
			AGS_Culture_SetSiteFlash(site, false)
		end
	end	
end

function AGS_Culture_OnHolySiteChangeTypeCooldown(site_entity_id)
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		if site.entity == site_entity_id then
			AGS_Culture_SetSiteFlash(site, false)
		end
	end
end

function AGS_Culture_OnHolySiteChangeTypeContinue(instigating_player, site_entity_id, holy_site_progress, holy_site_pos)
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		if site.entity == site_entity_id then
			site.player_last_capturing = instigating_player.id
			-- Changed from original if to simply always be specific player color instead of merging.
			site.color_last_capturing = Player_GetUIColour(instigating_player.id)
			if not site.is_revealed then
				FOW_RevealArea(holy_site_pos, AGS_CULTURE_VISION_RADIUS, -1)
				site.is_revealed = true
			end
			-- Stop flashing.
			AGS_Culture_SetSiteFlash(site, false)
			-- Trigger a blip that matches colour of instigator
			UI_CreateMinimapBlipOnPosFrom(instigating_player.id, holy_site_pos, 5, "objective_holy_site_spin")
		end
	end	

	if holy_site_progress == 0 then
		local selected_relation = AGS_GetRelation(instigating_player)
		-- Simply based on relation to instigator
		AGS_Notifications_ObjectiveActionSelectable(instigating_player, AGS_NOTIFICATIONS_CULTURE_CAPTURING, selected_relation)
	end
end

function AGS_Culture_OnHolySiteChangeTypeContested(instigating_player, site_entity_id, holy_site_progress, holy_site_pos)	
	if holy_site_progress ~= 0 then
		local selected_relation = AGS_SAE_ALLY
		-- positive progress is bad for us as enemy is taking it
		if holy_site_progress > 0 then
			selected_relation = AGS_SAE_ENEMY
		-- negative progress is bad for enemy as local and his ally is taking it
		elseif holy_site_progress < 0 and instigating_player == AGS_GS_LOCAL_PLAYER then
			selected_relation = AGS_SAE_SELF
		end
		AGS_Notifications_ObjectiveActionSelectable(instigating_player, AGS_NOTIFICATIONS_CULTURE_CONTESTING,	selected_relation)	
	end
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		if site.entity == site_entity_id then
			AGS_Culture_SetSiteFlash(site, true)
			-- Trigger a blip that corresponds to the instigating player progress colour
			UI_CreateMinimapBlipOnPosFrom(site.player_last_capturing, holy_site_pos, 5, "objective_holy_site")
		end
	end
end

function AGS_Culture_OnHolySiteChangeTypeNeutralized(instigating_player, site_entity_id, holy_site_pos, owning_player)
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		if site.entity == site_entity_id then
			AGS_Culture_SetSiteFlash(site, false)
		end
	end
	
	-- If no players have monks in range of Holy Site (note: this ensures that the neutralized/lost 
	-- cues do not overlap with the capture started cues if an enemy Monk is in range)
	if not AGS_Culture_HasContestingMonk(holy_site_pos) then
		local selected_relation = AGS_SAE_ALLY
		local is_owner_relation = AGS_GetRelation(Core_GetPlayersTableEntry(owning_player))
		-- Owner side gets this
		if is_owner_relation ~= AGS_SAE_ENEMY then
			selected_relation = AGS_SAE_ENEMY
		-- Local instigator gets this
		elseif instigating_player == AGS_GS_LOCAL_PLAYER then
			selected_relation = AGS_SAE_SELF
		end
		AGS_Notifications_ObjectiveActionSelectable(instigating_player, AGS_NOTIFICATIONS_CULTURE_NEUTRALIZED, selected_relation)
	end
	
	-- Trigger a blip that matches colour of instigator
	UI_CreateMinimapBlipOnPosFrom(instigating_player.id, holy_site_pos, 5, "objective_holy_site_spin")
	Core_CallDelegateFunctions("PointLost", site_entity_id)
end

function AGS_Culture_OnHolySiteChangeTypeNeutralizing(instigating_player, site_entity_id, holy_site_progress, holy_site_pos, owning_player)
	for _, site in pairs(AGS_CULTURE_SACRED_SITE_OBJECTIVES) do
		if site.entity == site_entity_id then
			AGS_Culture_SetSiteFlash(site, true)
		end
	end
	
	if math.abs(holy_site_progress) == 1 then
		local instigator_relation = AGS_GetRelation(instigating_player)
		local is_owner_relation = AGS_GetRelation(Core_GetPlayersTableEntry(owning_player))
		-- For self or ally instigation do this
		if instigator_relation ~= AGS_SAE_ENEMY then
			AGS_Notifications_ObjectiveActionSelectable(instigating_player, AGS_NOTIFICATIONS_CULTURE_NEUTRALIZING, instigator_relation)
		-- For enemy owner do this
		elseif is_owner_relation == AGS_SAE_SELF then 
			AGS_Notifications_ObjectiveActionSelectable(instigating_player, AGS_NOTIFICATIONS_CULTURE_NEUTRALIZING, AGS_SAE_SELF)
		end
	end	
	
	-- Trigger a blip that matches colour of instigator
	UI_CreateMinimapBlipOnPosFrom(instigating_player.id, holy_site_pos, 5, "objective_holy_site_spin")
end

function AGS_Culture_OnHolySiteChangeTypeCapture(instigating_player, holy_site_pos, site_entity_id)
	local instigator_relation = AGS_GetRelation(instigating_player)
	-- Check if this capture created a winner, if yes then trigger game over.
	if AGS_Culture_AreSitesThresholdControlled(AGS_CULTURE_VICTORY_THRESHOLD, instigating_player) then
		-- Acknowledge and save winner for later
		AGS_CULTURE_LAST_MAJORITY_CAPTURER = instigating_player
		-- Trigger victory.
		AGS_Culture_VictoryTriggered()
	-- Inform all players about team approaching dangerous amount of states under control.
	elseif AGS_Culture_AreSitesThresholdControlled(AGS_CULTURE_WARNING_THRESHOLD, instigating_player) then
		-- Notify all players about this.
		AGS_Notifications_ObjectiveActionSelectable(instigating_player, AGS_NOTIFICATIONS_CULTURE_APPROACH, instigator_relation)
		if instigator_relation ~= AGS_SAE_ENEMY then
			-- Trigger a blip that matches colour of instigator for new site that bringed it to control warning threshold
			UI_CreateMinimapBlipOnPosFrom(instigating_player.id, holy_site_pos, 5, "objective_holy_site")
		else
			-- Blips all sites as warning to persuade players that they need to do something.
			AGS_Culture_HolySiteMinimapBlips()
		end
	else 
		-- Capture of this site did not change anything or it shifted balance to neutral
		AGS_Notifications_ObjectiveActionSelectable(instigating_player, AGS_NOTIFICATIONS_CULTURE_CAPTURED, instigator_relation)
		-- Trigger a blip that matches colour of instigator
		UI_CreateMinimapBlipOnPosFrom(instigating_player.id, holy_site_pos, 5, "objective_holy_site")
	end
	Core_CallDelegateFunctions("PointCaptured", instigating_player, site_entity_id)
end