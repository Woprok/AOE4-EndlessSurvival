---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Keeps track of all teams and provides api for anyone to access.
---------------------------------------------------------------------------------------------------

AGS_TEAMS_MODULE = "AGS_Teams"
AGS_TEAMS_TABLE = {
	
}

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------
Core_RegisterModule(AGS_TEAMS_MODULE)	

function AGS_Teams_EarlyInitializations()
	AGS_Print("AGS_Teams_EarlyInitializations")
	
	AGS_Teams_CreateInitialTeams()
end

function AGS_Teams_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_Teams_OnPlayerDefeated")
	-- Assign to default team field once player is eliminated. Hopefully nothing will overwrite it after we do it.
	if player ~= nil then
		player.team.index = player.AGS_Team.index
		player.team.players = player.AGS_Team.allies
	end
end

function AGS_Teams_OnGameOver()
	AGS_Print("AGS_Teams_OnGameOver")
	-- On end game fix issues with incorrectly displayed team.
	for _, player in pairs(PLAYERS) do 
		if player ~= nil then
			player.team.index = player.AGS_Team.index
			player.team.players = player.AGS_Team.allies
		end
	end
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

-- Checks if the team game is started with just one team.
function AGS_Teams_IsSingleTeamSandbox()
	-- Only static teams can be a sandbox.
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_STANDARD then
		local first_index = nil
		-- go through all players and check if they are all on same team
		for _, player in pairs(PLAYERS) do 
			if first_index == nil then
				first_index = player.AGS_Team.index
			end
			if first_index ~= player.AGS_Team.index then
				return false
			end
		end
		-- nil is problem as it would mean that game had no players, otherwise we already jumped out.
		-- so this will return true only if the players are in single team game.
		if first_index ~= nil then
			return true
		end
	end
	-- FFA & Dynamic is never a sandbox game.
	return false
end

function AGS_Teams_CreateInitialTeams()	
	-- Create Static Teams for either static or dynamic teams. (Does not matter for now.)
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_STANDARD then
		AGS_Teams_CreateStaticTeams()
	-- Create FFA for all other options as we cant track teams in dynamic.
	else
		AGS_Teams_CreateFFA()
	end
	-- Print initial teams.
	for i, team in pairs(AGS_TEAMS_TABLE) do
		AGS_Print("Team", i)
		local x = "TEAM: " .. tostring(i) .. " MEMBERS: "
		for _, member in pairs(team) do
			AGS_Print(x, member.id)
		end
		AGS_Print("Team", i)
	end
end

function AGS_Teams_CreateFFA()
	for _, player in pairs(PLAYERS) do 
		-- FFA forces all teams to be just slotIndex
		player.AGS_Team = {
			index = player.slotIndex,
			allies = { },
		}
		table.insert(AGS_TEAMS_TABLE, { player })
		AGS_Print(player.AGS_Team)
	end	
end

function AGS_Teams_CreateStaticTeams()
	for _, player in pairs(PLAYERS) do 
		if player.AGS_Team == nil then
			-- Team game sets team how they are defined and removes all no teamers.
			local team_id = Player_GetTeam(player.id)
			if team_id >= 100 then
				team_id = 100 + player.slotIndex
			end
			player.AGS_Team = {
				index = team_id,
				allies = { player },
			}
			for _, ally in pairs(PLAYERS) do
				if player ~= ally and team_id == Player_GetTeam(ally.id) then
					table.insert(player.AGS_Team.allies, ally)
				end
			end
			for _, ally in pairs(player.AGS_Team.allies) do
				ally.AGS_Team = {
					index = team_id,
					allies = player.AGS_Team.allies,
				}
			end
			table.insert(AGS_TEAMS_TABLE, player.AGS_Team.allies)			
		end
	end	
end
-- Returns nil or winner player list, e.g. all non eliminated players.
function AGS_Teams_DoesWinnerGroupExists()
	local winner_group = nil
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_FFA then
		winner_group = AGS_Teams_GetSoloTeamWinner()
	end
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_STANDARD then
		winner_group = AGS_Teams_GetStaticTeamWinners()
	end
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_DYNAMIC then
		winner_group = AGS_Teams_GetDynamicTeamWinners()
	end	
	return winner_group
end
-- Returns true if player static team is still alive or false if his team was defeated.
function AGS_Teams_IsTeamAlive(player_id)
	local player = Core_GetPlayersTableEntry(player_id)
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_STANDARD and AGS_Teams_CountAliveInGroup(player.AGS_Team.allies) > 0 then
		return true
	end	
	return false
end

---------------------------------------------------------------------------------------------------
-- Internal Functions:
---------------------------------------------------------------------------------------------------
-- Returns nil or winner list that contains solo player.
function AGS_Teams_GetSoloTeamWinner()
	local total_alive = AGS_Teams_CountAlivePlayers()
	-- Return single living player
	if total_alive == 1 then
		for _, player in pairs(PLAYERS) do
			if not player.isEliminated then
				return { player }
			end
		end		
	end
	-- Quit if there is not a single player count
	return nil	
end
-- Returns nil or winner list from statics.
function AGS_Teams_GetStaticTeamWinners()
	local winner_group = { }
	local total_alive = AGS_Teams_CountAlivePlayers()
	for _, team in pairs(AGS_TEAMS_TABLE) do
		-- This is equal only if single team is alive
		if total_alive == AGS_Teams_CountAliveInGroup(team) then
			return AGS_Teams_GetStaticTeamAliveMembers(team)
		end
	end
	return nil
end
-- Returns nil or winner list.
function AGS_Teams_GetDynamicTeamWinners()
	local potential_winner_group = { }
	-- Get count of living players.
	local total_alive = AGS_Teams_CountAlivePlayers()
	-- Now we count all living players...
	for _, player in pairs(PLAYERS) do	
		if not player.isEliminated then
			local allies_count = AGS_Teams_CountAliveAllies(player)	
			-- Ally count is without this player, so we add +1 and compare it to total.
			-- Equals means that this player is allied to all other surviving players.
			if total_alive == allies_count + 1 then
				-- We will remember him as potential winner.
				table.insert(potential_winner_group, player)				
			end				
		end		
	end
	-- if total alive is equal to total players that were allied to all others we can declare it as winner_group.
	if total_alive == #potential_winner_group then
		return potential_winner_group
	end
	return nil
end
-- Returns all alive members (player table) of static team. Each player can be only one static team so he always has reference for this.
function AGS_Teams_GetStaticTeamAliveMembers(team_mates)
	local alive_team = { } 
	for _, member in pairs(team_mates) do
		if not member.isEliminated then
			table.insert(alive_team, member)
		end
	end
	return alive_team
end
-- Friendly players are all that share mutual alliance with source player.
-- This will return list without the source player.
function AGS_Teams_GetAllMutualFriendshipPlayers(player)
	local allies = { }
	for _, ally in pairs(PLAYERS) do
		if player ~= ally and not ally.isEliminated then
			if AGS_IsMutualRelation(player.id, ally.id, R_ALLY) then
				table.insert(allies, ally)				
			end
		end
	end
	return allies
end
-- Returns all players that are not considered allies for current TeamVictory.
-- Can choose to get also eliminated via opt_all.
function AGS_Teams_GetAllCurrentOpponents(player, opt_all)
	if opt_all == nil then 
		opt_all = false 
	end	
	enemy_group = {}
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_FFA then
		for _, enemy in pairs(PLAYERS) do
			if enemy ~= player and (not enemy.isEliminated or opt_all) then
				table.insert(enemy_group, enemy)
			end			
		end
	elseif AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_STANDARD then
		for _, enemy in pairs(PLAYERS) do
			if enemy ~= player and (not enemy.isEliminated or opt_all) and player.AGS_Team.index ~= enemy.AGS_Team.index then
				table.insert(enemy_group, enemy)
			end			
		end
	elseif AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_DYNAMIC then
		for _, enemy in pairs(PLAYERS) do
			if enemy ~= player and (not enemy.isEliminated or opt_all) and not AGS_IsMutualRelation(player.id, enemy.id, R_ALLY) then
				table.insert(enemy_group, enemy)
			end			
		end
	end	
	return enemy_group
end
-- Returns all players that are considered allies for current TeamVictory.
-- Can choose to get also eliminated via opt_all.
function AGS_Teams_GetAllCurrentTeammates(player, opt_all)
	if opt_all == nil then 
		opt_all = false 
	end	
	ally_group = {}
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_FFA then
		return { }
	elseif AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_STANDARD then
		for _, ally in pairs(PLAYERS) do
			if ally ~= player and (not ally.isEliminated or opt_all) and player.AGS_Team.index == ally.AGS_Team.index then
				table.insert(ally_group, ally)
			end			
		end
	elseif AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_DYNAMIC then
		for _, ally in pairs(PLAYERS) do
			if ally ~= player and (not ally.isEliminated or opt_all) and AGS_IsMutualRelation(player.id, ally.id, R_ALLY) then
				table.insert(ally_group, ally)
			end			
		end
	end	
	return ally_group
end

-- Returns if local player is sharing victory with other player.
function AGS_Teams_IsTeamVictoryEligible(player)
	return AGS_Teams_AreTeamVictoryEligible(AGS_GS_LOCAL_PLAYER, player)
end

-- Returns if player is sharing victory with other player.
function AGS_Teams_AreTeamVictoryEligible(player, other_player)
	-- Self or dynamic is true
	if player == other_player then
		return true
	end
	-- Team is true only if they are in same
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_STANDARD and player.AGS_Team.index == other_player.AGS_Team.index then
		return true
	end
	-- Try if it is dynamic team version
	if AGS_GLOBAL_SETTINGS.TeamVictory == AGS_GS_TEAM_VICTORY_DYNAMIC and AGS_IsMutualRelation(player.id, other_player.id, R_ALLY) then
		return true
	end
	-- Otherwise its always false
	return false
end
---------------------------------------------------------------------------------------------------
-- Internal Helper Functions:
---------------------------------------------------------------------------------------------------
-- Takes table of Players and returns amount of players that are not yet tagged eliminated.
function AGS_Teams_CountAliveInGroup(group_table)
	local total_alive = 0
	for _, player in pairs(group_table) do	
		if not player.isEliminated then
			total_alive = total_alive + 1
		end
	end
	return total_alive
end
-- Returns amount of players that are not yet tagged eliminated.
function AGS_Teams_CountAlivePlayers()
	return AGS_Teams_CountAliveInGroup(PLAYERS)
end
-- Returns number of mutual allies that are alive.
function AGS_Teams_CountAliveAllies(player)
	local allies_count = 0
	for _, ally in pairs(PLAYERS) do
		if player ~= ally and not ally.isEliminated and AGS_IsMutualRelation(player.id, ally.id, R_ALLY) then
			allies_count = allies_count + 1
		end
	end		
	return allies_count
end
