---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Treaty subcondition.
-- Handles treaty functionality and all asociated events invokes.
-- Creates cease fire at the start of the game.
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_treaty_data.scar")
AGS_TREATY_MODULE = "AGS_Treaty"
AGS_TREATY_OBJECTIVE = nil
AGS_TREATY_TIMER = "AGS_TreatyTimer"
AGS_TREATY_PEACE_TIME = 0 * 60
AGS_TREATY_CHECK_FREQUENCY = 1.0
AGS_TREATY_COUNTDOWN_NOTIFICATIONS = { }

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_TREATY_MODULE)	

function AGS_Treaty_UpdateModuleSettings()
	AGS_Print("AGS_Treaty_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Treaty then
		Core_UnregisterModule(AGS_TREATY_MODULE)
		return
	end
	AGS_TREATY_PEACE_TIME = AGS_GLOBAL_SETTINGS.TreatySettings.Timer * 60
end

function AGS_Treaty_OnPlay()
	AGS_Print("AGS_Treaty_OnPlay")
	AGS_Treaty_StartPeace()
	AGS_Treaty_CreateObjective()
	AGS_Treaty_UpdateObjective()
	-- Timers and time checks are initialized last.
	Rule_AddInterval(AGS_Treaty_OnTimerTick, AGS_TREATY_CHECK_FREQUENCY)
end

function AGS_Treaty_OnPlayerEliminated(player, reason)
	AGS_Print("AGS_Treaty_OnPlayerEliminated")
	-- If last opponent left, game will be decided in FFA and Static Teams, even during treaty.
	if Timer_Exists(AGS_TREATY_TIMER) and Timer_GetRemaining(AGS_TREATY_TIMER) > 0.0 then
		if AGS_GLOBAL_SETTINGS.TeamVictory ~= AGS_GS_TEAM_VICTORY_DYNAMIC then
			AGS_Conditions_CheckVictory(true, AGS_Presentations_Victory, AGS_WR_TREATY,
			AGS_Objectives_PresentWrap(
				AGS_TREATY_OBJECTIVE, 
				OS_Complete, 
				AGS_OBJECTIVES_TREATY.title_victory))
		end
	end
end

function AGS_Treaty_OnObjectiveToggle(toggle)
	AGS_Print("AGS_Treaty_OnObjectiveToggle")
	if AGS_TREATY_OBJECTIVE ~= nil and Timer_Exists(AGS_TREATY_TIMER) and Timer_GetRemaining(AGS_TREATY_TIMER) > 0.0 then
		AGS_Objectives_Set(AGS_TREATY_OBJECTIVE, nil, toggle)	
	end
end

-- This is not expected to be required at all.
function AGS_Treaty_OnGameOver()
	AGS_Print("AGS_Treaty_OnGameOver")
	Rule_Remove(AGS_Treaty_OnTimerTick)
	AGS_Treaty_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------
-- Periodic update to show current status to everyone.
function AGS_Treaty_OnTimerTick()
	-- Check if its over.
	if Timer_Exists(AGS_TREATY_TIMER) and Timer_GetRemaining(AGS_TREATY_TIMER) == 0.0 then	
		AGS_Print("AGS_Treaty_StartWar")
		Rule_RemoveMe()
		Timer_End(AGS_TREATY_TIMER)
		AGS_Treaty_StartWar()
		return
	end	
	-- Anyway update objective and countdown notifications.
	AGS_Treaty_UpdateObjective()
	AGS_Treaty_Countdown()
end
---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_Treaty_StartPeace()
	AGS_Print("AGS_Treaty_StartPeace")
	-- Notify everyone of treaty rules are in place.	
	Core_CallDelegateFunctions("TreatyStarted")
	-- Disables fighting between players via diplomacy.	
	if AGS_GLOBAL_SETTINGS.TreatySettings.ChangeRelations then
		AGS_Treaty_DisableFighting()
	end
	-- Finally prepare notifications and start countdown.
	if not Timer_Exists(AGS_TREATY_TIMER) then	
		AGS_Treaty_CreateTimerNotifications()	
		Timer_Start(AGS_TREATY_TIMER, AGS_TREATY_PEACE_TIME)
	end
	AGS_Print("AGS_Treaty_StartPeace-Over")
end

function AGS_Treaty_StartWar()
	AGS_Treaty_CompleteObjective()
	AGS_Treaty_RemoveObjective()
	-- Notify everyone of treaty rules ended.	
	Core_CallDelegateFunctions("TreatyEnded")	
	if AGS_GLOBAL_SETTINGS.TreatySettings.ChangeRelations then
		AGS_Treaty_EnableFighting()
	end
	AGS_Print("AGS_Treaty_StartWar-Over")
end

function AGS_Treaty_DisableFighting()
	Diplomacy_AllPlayer_SaveAndChangeToFriends()
	Diplomacy_OverrideAllPlayerDiplomacySettings(AGS_GLOBAL_SETTINGS.Tributes, false)
end

function AGS_Treaty_EnableFighting()
	Diplomacy_AllPlayer_LoadFromSave()
	Diplomacy_OverrideAllPlayerDiplomacySettings(AGS_GLOBAL_SETTINGS.Tributes, AGS_GLOBAL_SETTINGS.Relations)	
end

function AGS_Treaty_CreateObjective()
	AGS_TREATY_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_TREATY, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_TREATY_OBJECTIVE, OS_Incomplete, true, nil, COUNTER_TimerDecreasing)
end

function AGS_Treaty_UpdateObjective()
	AGS_Objectives_Progress(
		AGS_TREATY_OBJECTIVE, 
		nil,
		nil,
		nil,
		Timer_GetRemaining(AGS_TREATY_TIMER)
	)
end
-- Shows final message as the battle starts.
function AGS_Treaty_CompleteObjective()
	Music_UnlockIntensity()
	ResetMinimumIntensityMusicUnforced()
	Sound_Play2D("mus_shared_victory_countdown_mix_event_reset")
	AGS_Objectives_Present(AGS_TREATY_OBJECTIVE, OS_Complete, AGS_OBJECTIVES_TREATY.title_over)
end

function AGS_Treaty_RemoveObjective()
	AGS_Objectives_Set(AGS_TREATY_OBJECTIVE, nil, false)
end
-- Creates list of untriggered notifications.
function AGS_Treaty_CreateTimerNotifications()
	AGS_TREATY_COUNTDOWN_NOTIFICATIONS = { }
	for i = 1, #AGS_NOTIFICATIONS_COUNTDOWN do
		table.insert(AGS_TREATY_COUNTDOWN_NOTIFICATIONS, { triggered = false, }) 
	end
end
-- Trigger all required notifications before timer runs out.
function AGS_Treaty_Countdown()	
	for i = 1, #AGS_TREATY_COUNTDOWN_NOTIFICATIONS do
		-- If threshold notification has not been triggered AND timer is in threshold window
		if not AGS_TREATY_COUNTDOWN_NOTIFICATIONS[i].triggered and 
			AGS_NOTIFICATIONS_COUNTDOWN[i].time >= Timer_GetRemaining(AGS_TREATY_TIMER) then 
			-- Mark as triggered.
			AGS_TREATY_COUNTDOWN_NOTIFICATIONS[i].triggered = true			
			AGS_Notifications_CountdownNotification(AGS_GS_LOCAL_PLAYER, i, AGS_NOTIFICATIONS_TREATY_COUNTDOWN)
		end
	end	
end