---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Contains condition helpers for objective handling.
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- Creates objective by combining core and template.
function AGS_Objectives_CreateFromCore(core, template)
	local new_objective = {
		reason = core.reason,
		title = core.title, 
		description = core.description,
		icon = core.icon,
		data_template = core.data_template,
		data_template_or = core.data_template_or,
		priority = core.priority,
		parent = core.parent,
		telemetry = core.telemetry,
		alert = core.alert,	
	}
	if template.reason ~= nil then
		new_objective.reason = template.reason
	end
	if template.title ~= nil then
		new_objective.title = template.title
	end
	if template.description ~= nil then
		new_objective.description = template.description
	end
	if template.icon ~= nil then
		new_objective.icon = template.icon
	end
	if template.data_template ~= nil then
		new_objective.data_template = template.data_template
	end
	if template.data_template_or ~= nil then
		new_objective.data_template_or = template.data_template_or
	end
	if template.priority ~= nil then
		new_objective.priority = template.priority
	end	
	if template.parent ~= nil then
		new_objective.parent = template.parent
	end	
	if template.telemetry ~= nil then
		new_objective.telemetry = template.telemetry
	end	
	if template.alert ~= nil then
		new_objective.alert = template.alert
	end	
	if template.music ~= nil then
		new_objective.music = template.music
	end	
	return new_objective
end

function AGS_Objectives_PresentWrap(obj_id, obj_state, obj_title, obj_title_param)
	return {
		id = obj_id,
		state = obj_state,
		title = obj_title,
		title_param = obj_title_param,
	}
end

function AGS_Objectives_Present(objective_id, state, title, title_param)
	local formatted_title = nil
	if title_param ~= nil then
		formatted_title = Loc_FormatText(title, title_param)		
	else
		formatted_title = Loc_FormatText(title)
	end
	if state ~= nil then
		Obj_SetState(objective_id, state)
	end
	Obj_CreatePopup(objective_id, formatted_title)	
end

function AGS_Objectives_SetColorProgress(objective, state, color, progress_percentage)
	-- Current state of an objective.
	if state ~= nil then
		Obj_SetState(objective, state)
	end
	-- Set color of progress.
	if color ~= nil then
		Obj_SetColour(objective, color.r, color.g, color.b, color.a)
	end
	-- Percentage completed.
	if progress_percentage ~= nil then
		Obj_SetProgress(objective, progress_percentage)
	end
end

function AGS_Objectives_Progress(objective, current_count, max_count, progress_percentage, timer)
	-- Current progress done.
	if current_count ~= nil then
		Obj_SetCounterCount(objective, current_count)
	end
	-- Maximum progress that can be done.
	if max_count ~= nil then
		Obj_SetCounterMax(objective, max_count)
	end
	-- Percentage completed.
	if progress_percentage ~= nil then
		Obj_SetProgress(objective, progress_percentage)
	end
	
	if timer ~= nil then
		Obj_SetCounterTimerSeconds(objective, timer)
	end
end
-- State is either OS_Complete, OS_Incomplete or OS_Failed
-- Counter is either COUNTER_TimerDecreasing or COUNTER_CountUpTo
function AGS_Objectives_Set(objective, state, visibility, progress, counter)
	if objective == nil then
		AGS_Print("AGS: OBJECTIVE WAS NOT DEFINED!")
	end
	-- Current state of an objective.
	if state ~= nil then
		Obj_SetState(objective, state)
	end
	-- Is objective visible ?
	if visibility ~= nil then
		Obj_SetVisible(objective, visibility)
	end
	-- Is objective progress visible ?
	if progress ~= nil then
		Obj_SetProgressVisible(objective, progress)
	end
	-- How is progress displayed ?
	if counter ~= nil then
		Obj_SetCounterType(objective, counter)
	end
end

function AGS_Objectives_SetTitle(objective, obj_title, title_param)
	-- Format title with a paramter.
	local title = obj_title
	if title_param ~= nil then
		title = Loc_FormatText(title, title_param)
	end
	-- Dynamic change of displayed title ?
	if title ~= nil then
		Obj_SetTitle(objective, title)
	end
end

function AGS_Objectives_Create(objective_data, player, title_param, parent)
	-- Select proper template to display objective.
	local template = objective_data.data_template
	if AGS_Conditions_IsPrimary(objective_data.reason) then
		template = objective_data.data_template_or
	end
	-- Format title with a paramter.
	local title = objective_data.title
	if title_param ~= nil then
		title = Loc_FormatText(title, title_param)
	end
	-- Create as child or independent.
	if parent == nil then
		parent = objective_data.parent
	end
	
	return AGS_Objectives_CreateNew(objective_data, player, title, template, parent)
end

function AGS_Objectives_GetCurrentState(objective)
	if objective == nil then
		AGS_Print("AGS: OBJECTIVE WAS NOT DEFINED!")
	end
	return Obj_GetState(objective)
end
---------------------------------------------------------------------------------------------------
-- Internal Functions:
---------------------------------------------------------------------------------------------------
-- Returns new objective from supplied parameters.
function AGS_Objectives_CreateNew(objective, player, title, template, parent)
	return Obj_Create(
		player.id, -- Most likely always local player ?
		title,
		objective.description, 	
		objective.icon, 
		template, 
		player.raceName, 
		objective.priority, -- objective type e.g. primary or secondary
		parent, -- parent objective
		objective.telemetry
	)	
end