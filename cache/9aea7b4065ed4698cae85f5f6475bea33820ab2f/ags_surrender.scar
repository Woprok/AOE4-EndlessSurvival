---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Surrender win condition.
-- A player is eliminated when they concede (through the Surrender button in the Pause menu). 
-- The last remaining player/team wins if last opponent surrendered. 
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_surrender_data.scar")
AGS_SURRENDER_MODULE = "AGS_Surrender"
AGS_SURRENDER_OBJECTIVE = nil
AGS_SURRENDER_ACTIVE = true

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_SURRENDER_MODULE)	
-- Surrender is always present, deactivated will only stop wincondition checks.
function AGS_Surrender_UpdateModuleSettings()
	AGS_Print("AGS_Surrender_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Surrender then
		AGS_SURRENDER_ACTIVE = false
	end
end

function AGS_Surrender_OnPlay()	
	AGS_Print("AGS_Surrender_OnPlay")
	-- Registers surrender event.
	Network_RegisterEvent("AGS_Surrender_Notify")
	AGS_Surrender_CreateObjective()	
end

function AGS_Surrender_TreatyStarted()
	AGS_Print("AGS_Surrender_TreatyStarted")
	AGS_SURRENDER_ACTIVE = false
end

function AGS_Surrender_TreatyEnded()
	AGS_Print("AGS_Surrender_TreatyEnded")
	AGS_SURRENDER_ACTIVE = true and AGS_GLOBAL_SETTINGS.Surrender
end
-- Response to local player's surrender request (via Surrender button in Pause menu).
function AGS_Surrender_OnSurrenderMatchRequested()	
	AGS_Print("AGS_Surrender_OnSurrenderMatchRequested")
	-- Broadcast surrender request to all players over the network.
	Network_CallEvent("AGS_Surrender_Notify")			
end

function AGS_Surrender_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_Surrender_OnPlayerDefeated")
	if reason == AGS_WR_SURRENDER then 
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_SURRENDER)
		-- This would end the game for single team game without check.
		-- Teammates needs to be eliminated by other conditions.
		-- AI Teammates will be dealt with by the default handle.
		-- Only non sandbox games reach inner if.
		if AGS_Surrender_CanEndGame(player) then
			-- We require special check for cases when surrender is valid resolver for situation for AI.
			if AGS_Conditions_CheckVictory(AGS_SURRENDER_ACTIVE, AGS_Presentations_Victory, AGS_WR_SURRENDER,
					AGS_Objectives_PresentWrap(
						AGS_SURRENDER_OBJECTIVE, 
						OS_Complete, 
						AGS_OBJECTIVES_SURRENDER.title)) then
				return
			end
		end
	end
	-- If this was not ended yet, we will attempt to do it.
	AGS_Surrender_CheckAI()
end

function AGS_Surrender_OnObjectiveToggle(toggle)
	AGS_Print("AGS_Surrender_OnObjectiveToggle")
	if AGS_SURRENDER_OBJECTIVE ~= nil then
		AGS_Objectives_Set(AGS_SURRENDER_OBJECTIVE, nil, toggle)	
	end
end

function AGS_Surrender_OnGameOver()
	AGS_Print("AGS_Surrender_OnGameOver")
	-- Network event does not need to be removed ?
	-- Network_UnRegisterEvent("AGS_Surrender_Notify")	
	AGS_Surrender_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Network Functions:
---------------------------------------------------------------------------------------------------
-- Kill player that was passed through network.
function AGS_Surrender_Notify(player_id)	
	AGS_Print("AGS_Surrender_Notify", player_id)	
	local player = Core_GetPlayersTableEntry(player_id)	
	AGS_SetPlayerDefeated(player.id, AGS_Presentations_Loss, AGS_WR_SURRENDER, 
		AGS_Objectives_PresentWrap(
			AGS_SURRENDER_OBJECTIVE, 
			OS_Failed, 
			AGS_OBJECTIVES_SURRENDER.title))
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- Gracefull resolution for matches where the last human player surrenders in an AI game with RelicLink.
function AGS_Surrender_CheckAI()
	-- Resolves match as winnerless if no human remains. 
	if not AGS_Conditions_IsAnyHumanAlive() then
		AGS_EndGame()
		Core_WinnerlessGameOver(AGS_Presentations_DefeatDefault, AGS_WR_SURRENDER)
	end
end	

function AGS_Surrender_CreateObjective()
	AGS_SURRENDER_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_SURRENDER, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_SURRENDER_OBJECTIVE, OS_Incomplete, true)
end

function AGS_Surrender_RemoveObjective()
	AGS_Objectives_Set(AGS_SURRENDER_OBJECTIVE, nil, false)
end

function AGS_Surrender_CanEndGame(eliminated_player)
	-- Cant end game with surrender in case of single team game.
	-- This is same as elimination. In both cases we should avoid ending game with single team.
	if AGS_Teams_IsSingleTeamSandbox() then
		return false
	end	
	if AGS_GLOBAL_SETTINGS.IsSandBox then
		return false
	end
	return true
end