---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Tech demo for survival
---------------------------------------------------------------------------------------------------

AGS_SURVIVAL_TEST_MODULE = "AGS_SurvivalTest"

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_SURVIVAL_TEST_MODULE)	

function AGS_SurvivalTest_UpdateModuleSettings()
	AGS_Print("AGS_SurvivalTest_UpdateModuleSettings")
	--if not AGS_GLOBAL_SETTINGS.PLACEHOLDER.PLACEHOLDER_VALUE then
	--	Core_UnregisterModule(AGS_SURVIVAL_TEST_MODULE)
	--end
end

function AGS_SurvivalTest_EarlyInitializations()
	AGS_Print("AGS_SurvivalTest_EarlyInitializations")
	--AGS_SurvivalTest_RemoveMapSacredSites()
end

function AGS_SurvivalTest_PresetExecute()
	AGS_Print("AGS_SurvivalTest_PresetExecute")
	AGS_SurvivalTest_GetSpawnPoints()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_SurvivalTest_Create(position)
	for _, player in pairs(PLAYERS) do		
		--local sbp_scout = AGS_GetCivilizationUnit(player.raceName, AGS_BP_SCOUT)
		--local sbp_scout = BP_GetSquadBlueprint("gaia_huntable_wolf")
		--local sbp_scout = BP_GetSquadBlueprint("dc9c718459894f58869e73a73f33effc:gaia_monster_wolf")
		local sbp_scout = BP_GetSquadBlueprint("dc9c718459894f58869e73a73f33effc:spearzombie")
		
		local sname = AGS_SGroupName(player.id, AGS_BP_SCOUT)		
		local squad_group = SGroup_CreateIfNotFound(sname)
		
		UnitEntry_DeploySquads(player.id, squad_group, {{sbp = sbp_scout, numSquads = 25}}, position)
		Cmd_AttackMove(squad_group, World_Pos(0,World_GetHeightAt(0,0),0))
		--SGroup_SetWorldOwned(squad_group)
		SGroup_Destroy(squad_group)
	end
end


function AGS_SurvivalTest_GetSpawnPoints()	
	local all_prefab_sites = EGroup_CreateUnique()
	World_GetBlueprintEntities(AGS_GetNeutralEntity(AGS_BP_SACRED_SITE), all_prefab_sites)
	for i = 1, EGroup_CountSpawned(all_prefab_sites) do
		local eid = EGroup_GetSpawnedEntityAt(all_prefab_sites, i)
		if eid ~= nil and Entity_IsSpawned(eid) then
			local position = Entity_GetPosition(eid)
			AGS_SurvivalTest_Create(position)
		end
	end
end

function AGS_SurvivalTest_CreateCentralSite()
	-- Create city point
	local ebp_site = AGS_GetNeutralEntity(AGS_BP_SACRED_SITE)
	local city_entity_id = AGS_SurvivalTest_CreateEntity(ebp_site, World_Pos(0, World_GetHeightAt(0, 0), 0))
end

-- Spawn entity as neutral and return it to caller.
function AGS_SurvivalTest_CreateEntity(bp_entity, position)
	local position_offset = World_Pos(0, 0, 0)	
	-- Determine proper position and rotation.
	local nx = position.x
	local ny = position.y
	local nz = position.z
	local placement = World_Pos(nx + position_offset.x, ny + position_offset.y, nz + position_offset.z)
	local rotation = World_Pos(nx + position_offset.x, ny + position_offset.y, nz + position_offset.z + 5)
	-- Spawn
	local e = Entity_CreateENVFacing(bp_entity, placement, rotation, true)
	
	local safe_spawn = World_GetSpawnablePosition(placement, e)
	Entity_WarpToPos(e, safe_spawn)
	
	Entity_Spawn(e)
	Entity_ForceConstruct(e)
	Entity_SnapToGridAndGround(e, false)
	return e	
end