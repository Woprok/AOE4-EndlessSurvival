---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Simplified access to civilization specific blueprints.
-- Referenceable by any other script.
---------------------------------------------------------------------------------------------------

-- This is stricly list of unit types, it might refer to real entity if they are called same
-- For most entities this is not true... Use getters for ENTITY_TABLE.
AGS_BP_KEEP = "castle" --scar_keep or castle
AGS_BP_TC_CAPITAL = "town_center_capital"
AGS_BP_TC_CAPITAL_UNIT = "town_center_capital_moving"
AGS_BP_TC = "town_center"
AGS_BP_TC_LANDMARK = "town_center_landmark"
AGS_BP_VILLAGER = "villager"
AGS_BP_SPEARMAN = "spearman"
AGS_BP_ARCHER = "archer"
AGS_BP_HORSEMAN = "horseman"
AGS_BP_SPRINGALD = "springald"
AGS_BP_MONK = "monk"
AGS_BP_SCOUT = "scout"
AGS_BP_KING = "king"
AGS_BP_SHEEP = "sheep"
AGS_BP_TREE = "tree"
AGS_BP_LANDMARK = "wonder"
AGS_BP_LANDMARK_OTHER = "landmark"
AGS_BP_WONDER = "wonder_imperial_age"
AGS_BP_SACRED_SITE = "special_beacon"
-- All buildings should be tagged with this otherwise winconditions & others will not work.
AGS_BP_BUILDING = "building"
-- All untis should be tagged with this otherwise winconditions & others will not work.
AGS_BP_UNIT_CLASS = "annihilation_condition"
AGS_BP_GAIA = "gaia"
AGS_BP_MOVING_BUILDINGS = "mongol_moving_structure"
AGS_BP_HOUSE_UNIT = "house_moving"
AGS_BP_HOW = "house_of_wisdom"
AGS_BP_PALISADE = "palisade_wall"
AGS_BP_PALISADE_GATE = "palisade_gate"
AGS_BP_ANY_WALL = "wall"
AGS_BP_ANY_GATE = "gate"
AGS_BP_MOBILE = "mobile_building"
AGS_BP_SIEGE = "siege"
AGS_BP_WORKER = "worker"
AGS_BP_MILITARY = "military"
AGS_BP_MONASTERY = "monastery"
AGS_BP_BARRACKS = "barracks"
AGS_BP_ARCHERY_RANGE = "archery_range"
AGS_BP_STABLE = "stable"
AGS_BP_WORKSHOP = "siege_workshop"
-- Market does not exists anymore ?
AGS_BP_MARKET = "scar_market"
AGS_BP_DOCK = "scar_dock"
AGS_BP_HOUSE = "house"
AGS_BP_BLACKSMITH = "blacksmith"
AGS_BP_RELIC = "relic"
AGS_BP_TREASURE = "resource_pickup"
AGS_BP_TREASURE_FOOD = "resource_pickup_food"
AGS_BP_TREASURE_WOOD = "resource_pickup_wood"
AGS_BP_TREASURE_GOLD = "resource_pickup_gold"
AGS_BP_TREASURE_STONE = "resource_pickup_stone"
AGS_BP_DEPOSIT_GOLD = "gold"
AGS_BP_DEPOSIT_STONE = "stone"
AGS_BP_DEPOSIT_FOOD = "forage_bush"
AGS_BP_DEPOSIT_MARKET = "settlement"
AGS_BP_DEPOSIT_ANIMAL = "animal"
AGS_BP_OUTPOST = "outpost"
-- This represents any tradeable building. Landmarks, Docks, Markets. 
-- Counts for tributes.
AGS_BP_TYPE_TRADE = "trade_post"

AGS_ENTITY_TABLE = {
	neutral = {
		sheep = "gaia_herdable_sheep",
		resource_pickup_food = "resource_pickup_food",
		resource_pickup_wood = "resource_pickup_wood",
		resource_pickup_gold = "resource_pickup_gold",
		resource_pickup_stone = "resource_pickup_stone",
		relic = "relic",
		special_beacon = "holy_site",
	},
	english = {
		castle = "building_defense_keep_eng",
		town_center_capital = "building_town_center_capital_eng",
		town_center = "building_town_center_eng",
		town_center_landmark = "building_landmark_age2_westminster_palace_eng",
		scar_market = "building_econ_market_control_eng",
		villager = "unit_villager_1_eng",
		scout = "unit_scout_1_eng",
		king = "unit_king_1_eng",
		palisade_wall = "building_defense_palisade_eng",
		palisade_gate = "building_defense_palisade_gate_eng",
		monk = "unit_monk_3_eng",
		monastery = "building_unit_religious_control_eng",
		barracks = "building_unit_infantry_control_eng",
		stable = "building_unit_cavalry_control_eng",
		archery_range = "building_unit_ranged_control_eng",
		siege_workshop = "building_unit_siege_control_eng",
		scar_dock = "building_unit_naval_eng",		
		house = "building_house_control_eng",
		blacksmith = "building_tech_unit_infantry_control_eng",
		outpost = "building_defense_outpost_eng",
	},
	chinese = {
		castle = "building_defense_keep_chi",
		town_center_capital = "building_town_center_capital_chi",
		town_center = "building_town_center_chi",
		scar_market = "building_econ_market_control_chi",
		villager = "unit_villager_1_chi",
		scout = "unit_scout_1_chi",
		king = "unit_king_1_chi",	
		palisade_wall = "building_defense_palisade_chi",
		palisade_gate = "building_defense_palisade_gate_chi",
		monk = "unit_monk_3_chi",
		monastery = "building_unit_religious_control_chi",
		barracks = "building_unit_infantry_control_chi",
		stable = "building_unit_cavalry_control_chi",
		archery_range = "building_unit_ranged_control_chi",
		siege_workshop = "building_unit_siege_control_chi",
		scar_dock = "building_unit_naval_chi",	
		house = "building_house_control_chi",	
		blacksmith = "building_tech_unit_infantry_control_chi",	
		outpost = "building_defense_outpost_chi",
	},
	french = {
		castle = "building_defense_keep_fre",
		town_center_capital = "building_town_center_capital_fre",
		town_center = "building_town_center_fre",
		scar_market = "building_econ_market_control_fre",
		villager = "unit_villager_1_fre",
		scout = "unit_scout_1_fre",
		king = "unit_king_1_fre",
		palisade_wall = "building_defense_palisade_fre",
		palisade_gate = "building_defense_palisade_gate_fre",
		monk = "unit_monk_3_fre",
		monastery = "building_unit_religious_control_fre",
		barracks = "building_unit_infantry_control_fre",
		stable = "building_unit_cavalry_control_fre",
		archery_range = "building_unit_ranged_control_fre",
		siege_workshop = "building_unit_siege_control_fre",
		scar_dock = "building_unit_naval_fre",	
		house = "building_house_control_fre",	
		blacksmith = "building_tech_unit_infantry_control_fre",
		outpost = "building_defense_outpost_fre",
	},
	hre = {
		castle = "building_defense_keep_hre",
		town_center_capital = "building_town_center_capital_hre",
		town_center = "building_town_center_hre",
		town_center_landmark = "building_landmark_age3_hohenzollern_castle_hre",
		scar_market = "building_econ_market_control_hre",
		villager = "unit_villager_1_hre",
		scout = "unit_scout_1_hre",
		king = "unit_king_1_hre",
		palisade_wall = "building_defense_palisade_hre",
		palisade_gate = "building_defense_palisade_gate_hre",
		monk = "unit_monk_1_hre",
		monastery = "building_unit_religious_control_hre",
		barracks = "building_unit_infantry_control_hre",
		stable = "building_unit_cavalry_control_hre",
		archery_range = "building_unit_ranged_control_hre",
		siege_workshop = "building_unit_siege_control_hre",
		scar_dock = "building_unit_naval_hre",	
		house = "building_house_control_hre",
		blacksmith = "building_tech_unit_infantry_control_hre",	
		outpost = "building_defense_outpost_hre",
	},
	rus = {	
		castle = "building_defense_keep_control_rus",
		town_center_capital = "building_town_center_capital_rus",
		town_center = "building_town_center_rus",
		scar_market = "building_econ_market_control_rus",
		villager = "unit_villager_1_rus",
		scout = "unit_scout_1_rus",
		king = "unit_king_1_rus",
		palisade_wall = "building_defense_palisade_rus",
		palisade_gate = "building_defense_palisade_gate_rus",
		monk = "unit_monk_3_rus",
		monastery = "building_unit_religious_control_rus",
		barracks = "building_unit_infantry_control_rus",
		stable = "building_unit_cavalry_control_rus",
		archery_range = "building_unit_ranged_control_rus",
		siege_workshop = "building_unit_siege_control_rus",
		scar_dock = "building_unit_naval_rus",	
		house = "building_house_control_rus",	
		blacksmith = "building_tech_unit_infantry_control_rus",
		outpost = "building_defense_wooden_fort_rus",		
	},
	abbasid = {
		castle = "building_defense_keep_control_abb",
		town_center_capital = "building_town_center_capital_abb",
		town_center = "building_town_center_abb",
		scar_market = "building_econ_market_control_abb",
		villager = "unit_villager_1_abb",
		scout = "unit_scout_1_abb",
		king = "unit_king_1_abb",
		house_of_wisdom = "building_house_of_wisdom_control_abb",
		palisade_wall = "building_defense_palisade_abb",
		palisade_gate = "building_defense_palisade_gate_abb",
		monk = "unit_monk_3_abb",
		monastery = "building_unit_religious_control_abb",
		barracks = "building_unit_infantry_control_abb",
		stable = "building_unit_cavalry_control_abb",
		archery_range = "building_unit_ranged_control_abb",
		siege_workshop = "building_unit_siege_control_abb",
		scar_dock = "building_unit_naval_abb",		
		house = "building_house_control_abb",	
		blacksmith = "building_tech_unit_infantry_control_abb",
		outpost = "building_defense_outpost_control_abb",
	},
	mongol = {
		castle = "building_defense_keep_control_nov",
		town_center_capital = "building_town_center_capital_mon",
		town_center_capital_moving = "building_town_center_capital_moving_mon",
		town_center = "building_town_center_mon",
		scar_market = "building_econ_market_mon",
		villager = "unit_villager_1_mon",
		scout = "unit_khan_1_mon",
		king = "unit_king_1_mon",
		house_moving = "building_house_moving_mon",
		monk = "unit_monk_3_mon",
		monastery = "building_unit_religious_mon",
		barracks = "building_unit_infantry_mon",
		stable = "building_unit_cavalry_mon",
		archery_range = "building_unit_ranged_mon",
		siege_workshop = "building_unit_siege_mon",
		scar_dock = "building_unit_naval_mon",	
		house = "building_house_mon",
		blacksmith = "building_tech_unit_infantry_mon",
		outpost = "building_defense_outpost_mon",
	},
	sultanate = {
		castle = "building_defense_keep_control_sul",
		town_center_capital = "building_town_center_capital_sul",
		town_center = "building_town_center_sul",
		scar_market = "building_econ_market_control_sul",
		villager = "unit_villager_1_sul",
		scout = "unit_scout_1_sul",
		king = "unit_king_1_sul",
		palisade_wall = "building_defense_palisade_sul",
		palisade_gate = "building_defense_palisade_gate_sul",
		monk = "unit_monk_2_sul",
		monastery = "building_unit_religious_control_sul",
		barracks = "building_unit_infantry_control_sul",
		stable = "building_unit_cavalry_control_sul",
		archery_range = "building_unit_ranged_control_sul",
		siege_workshop = "building_unit_siege_control_sul",
		scar_dock = "building_unit_naval_sul",	
		house = "building_house_control_sul",	
		blacksmith = "building_tech_unit_infantry_control_sul",
		outpost = "building_defense_outpost_control_sul",
	},
	malian = {
		castle = "building_defense_keep_mal",
		town_center_capital = "building_town_center_capital_mal",
		town_center = "building_town_center_mal",
		scar_market = "building_econ_market_mal",
		villager = "unit_villager_1_mal",
		scout = "unit_scout_1_mal",
		king = "unit_king_1_mal",
		palisade_wall = "building_defense_palisade_mal",
		palisade_gate = "building_defense_palisade_gate_mal",
		monk = "unit_monk_3_mal",
		monastery = "building_unit_religious_mal",
		barracks = "building_unit_infantry_mal",
		stable = "building_unit_cavalry_mal",
		archery_range = "building_unit_ranged_mal",
		siege_workshop = "building_unit_siege_mal",
		scar_dock = "building_unit_naval_mal",	
		house = "building_house_mal",	
		blacksmith = "building_tech_unit_infantry_mal",
		outpost = "building_defense_outpost_mal",
	},
	ottoman = {
		castle = "building_defense_keep_ott",
		town_center_capital = "building_town_center_capital_ott",
		town_center = "building_town_center_ott",
		scar_market = "building_econ_market_ott",
		villager = "unit_villager_1_ott",
		scout = "unit_scout_1_ott",
		king = "unit_king_1_ott",
		palisade_wall = "building_defense_palisade_ott",
		palisade_gate = "building_defense_palisade_gate_ott",
		monk = "unit_monk_3_ott",
		monastery = "building_unit_religious_ott",
		barracks = "building_unit_infantry_ott",
		stable = "building_unit_cavalry_ott",
		archery_range = "building_unit_ranged_ott",
		siege_workshop = "building_unit_siege_ott",
		scar_dock = "building_unit_naval_ott",	
		house = "building_house_ott",	
		blacksmith = "building_tech_unit_infantry_ott",
		outpost = "building_defense_outpost_ott",
	},
}

AGS_UP_ANY = "common"
AGS_UP_SPECIAL = "special"
AGS_UP_DARK = "AGE_DARK"
AGS_UP_FEUDAL = "AGE_FEUDAL"
AGS_UP_CASTLE = "AGE_CASTLE"
AGS_UP_IMPERIAL = "AGE_IMPERIAL"
AGS_CIV_SULTANATE = "sultanate"
AGS_CIV_ENGLISH = "english"
AGS_CIV_HRE = "hre"
AGS_CIV_MONGOL = "mongol"
AGS_CIV_ABBASID = "abbasid"
AGS_CIV_CHINESE = "chinese"
AGS_CIV_RUS = "rus"
AGS_CIV_FRENCH = "french"
AGS_CIV_MALIAN = "malian"
AGS_CIV_OTTOMAN = "ottoman"

AGS_CIV_PREFIXES = {
	chinese = "chi_",
	english = "eng_",
	french = "fre_",
	hre = "hre_",
	mongol = "mon_",
	rus = "rus_",
	sultanate = "sul_",
	abbasid = "abb_",
	malian = "mal_",
	ottoman = "ott_"
}

AGS_UPGRADE_AGES = {
	AGE_DARK = "dark_age",
	AGE_FEUDAL = "feudal_age",
	AGE_CASTLE = "castle_age",
	AGE_IMPERIAL = "imperial_age",
}

AGS_UPGRADE_CORRECTION_TABLE = {
	english = {
	},
	chinese = {
	},
	french = {
		"upgrade_tech_university_biology",
	},
	hre = {
		"upgrade_unit_religious_herbal_medicine_4",
		"upgrade_unit_religious_piety_4",		
	},
	rus = {	
		"upgrade_naval_swivel_cannon",
	},
	abbasid = {
		"upgrade_naval_forecastle",		
	},
	mongol = {
		"upgrade_unit_town_center_wheelbarrow_1",
		"upgrade_econ_resource_wood_fell_rate_1",	
		"upgrade_econ_villager_hunting_gear_1",
		"upgrade_unit_town_center_wheelbarrow_1",
		"upgrade_econ_resource_gold_harvest_rate_2",		
		"upgrade_econ_resource_gold_harvest_rate_3",
		"upgrade_siege_weapon_speed",		
		"upgrade_econ_resource_gold_harvest_rate_4",
		"upgrade_unit_religious_piety_4",
		"upgrade_unit_religious_tithe_barn_4",
		"upgrade_siege_adjustable_crossbar",
		"upgrade_siege_roller_trigger",
		"upgrade_manatarms_elite_army_tactics",
		"upgrade_tech_university_biology",
		"upgrade_tech_university_architecture_4",
		"upgrade_ranged_incendiary",
		"upgrade_siege_chemistry",
		"upgrade_siege_works",		
	},
	sultanate = {
		-- this faction uses if to not get any
	},
	malian = {
		"upgrade_ranged_incendiary",			
		"upgrade_unit_religious_tithe_barn_4",
		"upgrade_naval_swivel_cannon",
	},
	ottoman = {
		"upgrade_tech_military_academy",
	},
}

AGS_UPGRADE_TABLE = {
	english = {
		AGE_DARK = {	
		},
		AGE_FEUDAL = {
			-- Shipwrights was renamed only as desription.
			"upgrade_naval_shipwrights_eng",			
			"upgrade_longbow_make_camp_eng",			
			"upgrade_unit_manatarms_2_eng",
		},
		AGE_CASTLE = {
			"upgrade_armor_clad_eng",
			"upgrade_network_of_citadels_eng",				
			"upgrade_unit_archer_3_eng",
			"upgrade_unit_manatarms_3_eng",
			"upgrade_unit_spearman_3_eng",
		},
		AGE_IMPERIAL = {
			"upgrade_farm_improved_enclosures_eng",			
			"upgrade_ranged_longbow_arrow_volley_eng",			
			"upgrade_trebuchet_aoe_eng",			
			"upgrade_unit_archer_4_eng",
			"upgrade_unit_manatarms_4_eng",
			"upgrade_unit_spearman_4_eng",
		},
	},
	chinese = {
		AGE_DARK = {
		},
		AGE_FEUDAL = {
			"upgrade_imperial_examinations_chi",			
		},
		AGE_CASTLE = {
			--"upgrade_naval_hammocks_chi",
			"upgrade_wall_repair_chi",			
			"upgrade_unit_repeater_crossbow_3_chi",
		},
		AGE_IMPERIAL = {
			"upgrade_naval_explosive_techniques_chi",
			"upgrade_dynasty_econ_bonus_chi",
			"upgrade_gunpowder_cost_chi",
			"upgrade_gunpowder_damage_chi",
			"upgrade_manatarms_battle_hardened_chi",
			"upgrade_reload_drills_chi",			
			"upgrade_unit_firelancer_4_chi",
			"upgrade_unit_manatarms_4_chi",
			"upgrade_unit_repeater_crossbow_4_chi",
		},
	},
	french = {
		AGE_DARK = {
		},
		AGE_FEUDAL = {
			"upgrade_cavalry_chivalry_fre",			
		},
		AGE_CASTLE = {
			"upgrade_naval_long_guns_fre",			
			"upgrade_cavalry_cantled_saddle_fre",				
			"upgrade_ranged_crossbow_drills_fre",			
			"upgrade_unit_knight_3_fre",
		},
		AGE_IMPERIAL = {
			"upgrade_cavalry_bloodline_fre",	
			"upgrade_enlistment_incentives_fre",		
			"upgrade_ranged_crossbow_stirrups_fre",			
			"upgrade_unit_crossbowman_4_fre",
			"upgrade_unit_knight_4_fre",
		},
	},
	hre = {
		AGE_DARK = {
		},
		AGE_FEUDAL = {
			"upgrade_naval_firestations_hre",
			"upgrade_infantry_marching_drills_hre",
		},
		AGE_CASTLE = {
			"upgrade_benediction_hre",
			"upgrade_inspired_infantry_hre",
			"upgrade_devoutness_hre",
			"upgrade_building_fire_armor_hre",
			"upgrade_man_at_arms_maces_hre",
			"upgrade_man_at_arms_two_handed_hre",
			"upgrade_unit_manatarms_3_hre",
			"upgrade_unit_religious_herbal_medicine_4_hre",
		},
		AGE_IMPERIAL = {
			"upgrade_reinforced_defenses_hre",
			"upgrade_riveted_chain_armour_hre",
			"upgrade_unit_landsknecht_4_hre",
			"upgrade_unit_manatarms_4_hre",
			"upgrade_unit_religious_piety_4_hre",
		},
	},
	rus = {
		AGE_DARK = {	
		},
		AGE_FEUDAL = {
		},
		AGE_CASTLE = {
			"upgrade_naval_adaptable_hulls_rus",
			
			"upgrade_saints_blessing_duration_rus",
			"upgrade_saints_blessing_buff_effect_rus",
			"upgrade_saints_blessing_range_rus",	
			--"upgrade_naval_advanced_clinker_rus",
			"upgrade_cavalry_hp_rus",
			"upgrade_unit_knight_3_rus",										
		},
		AGE_IMPERIAL = {
			"upgrade_naval_mounted_guns",
			
			"upgrade_cavalry_melee_damage_rus",
			--"upgrade_naval_cedar_hulls_rus",
			"upgrade_unit_horsearcher_4_rus",
			"upgrade_unit_knight_4_rus",			
			"upgrade_siege_crew_training_rus",
			"upgrade_siege_fined_tuned_guns_rus",
			"upgrade_siege_improvements_rus",			
			"upgrade_springald_range_rus",
			"upgrade_streltsy_double_time_rus",
			"upgrade_streltsy_weapon_percision_rus",			
		},
	},
	abbasid = {
		AGE_DARK = {			
		},
		AGE_FEUDAL = {
			"upgrade_cul_cheaper_research_abb",
			"upgrade_econ_improved_carry_capacity_abb",
			"upgrade_mil_camel_archers_improved_weapon_abb",
			"upgrade_trade_commodity_trade_abb",		
			"upgrade_camel_archer_comp_bow_abb", -- phalanx ??? really	
		},
		AGE_CASTLE = {	
			"upgrade_naval_teak_masts_abb",
			"upgrade_cul_medical_centers_abb",
			"upgrade_econ_agriculture_abb",
			"upgrade_mil_mameluke_shields_abb",
			"upgrade_trade_trader_armor_abb",
			"upgrade_unit_camel_archer_3_abb",
			"upgrade_camel_speed_boost_abb",			
		},
		AGE_IMPERIAL = {
			"upgrade_cul_conversion_invuln_abb",
			"upgrade_econ_improved_processing_abb",
			"upgrade_mil_camel_support_abb",
			"upgrade_trade_gold_income_abb",
			"upgrade_unit_camel_archer_4_abb",
			"upgrade_unit_camel_rider_4_abb",
			"upgrade_camel_armor_abb",		
			"upgrade_mameluke_damage_abb", -- reload ??? really			
		},
	},
	mongol = {
		AGE_DARK = {
			"upgrade_unit_town_center_faster_packing_1_mon",			
			"upgrade_econ_resource_wood_fell_rate_1_mon",
			"upgrade_econ_resource_wood_fell_rate_1_improved_mon",			
			"upgrade_econ_villager_hunting_gear_1_mon",
			"upgrade_econ_villager_hunting_gear_1_improved_mon",
			"upgrade_unit_wheelbarrow_1_mon",
			"upgrade_unit_wheelbarrow_1_improved_mon",
		},
		AGE_FEUDAL = {
			"upgrade_econ_resource_food_harvest_rate_2_improved_mon",
			"upgrade_econ_resource_gold_harvest_rate_2_mon",
			"upgrade_econ_resource_gold_harvest_rate_2_improved_mon",
			"upgrade_econ_resource_wood_harvest_rate_2_improved_mon",
			"upgrade_scout_forester_mon",
			"upgrade_scout_forester_improved_mon",	
			"upgrade_unit_horseman_2_mon",
			"upgrade_unit_spearman_2_mon",
			"upgrade_naval_piracy_mon",
			"upgrade_khan_signal_arrow_mon",
			"upgrade_khan_signal_arrow_improved_mon",
			"upgrade_raid_bounty_mon",
			"upgrade_raid_bounty_improved_mon",
			"upgrade_improved_siege_engineers_mon",
		},
		AGE_CASTLE = {
			"upgrade_econ_resource_gold_harvest_rate_3_mon",
			"upgrade_econ_resource_food_harvest_rate_3_improved_mon",
			"upgrade_econ_resource_gold_harvest_rate_3_improved_mon",
			"upgrade_econ_resource_wood_harvest_rate_3_improved_mon",
			"upgrade_villager_health_improved_mon",			
			"upgrade_tech_military_academy_improved_mon",
			"upgrade_mangudai_weapon_damage_mon",
			"upgrade_mangudai_weapon_damage_improved_mon",
			"upgrade_ortoo_all_units_mon",
			"upgrade_unit_archer_3_mon",
			"upgrade_unit_horsearcher_3_mon",
			"upgrade_unit_horseman_3_mon",
			"upgrade_unit_spearman_3_mon",
			"upgrade_unit_religious_herbal_medicine_4_improved_mon",
			"upgrade_weapon_fire_damage_mon",
			"upgrade_weapon_fire_damage_improved_mon",
			"upgrade_siege_weapon_speed_improved_mon",
			"upgrade_siege_weapon_speed_mon",		
		},
		AGE_IMPERIAL = {
			"upgrade_econ_resource_gold_harvest_rate_4_mon",
			"upgrade_econ_resource_food_harvest_rate_4_improved_mon",
			"upgrade_econ_resource_gold_harvest_rate_4_improved_mon",
			"upgrade_econ_resource_wood_harvest_rate_4_improved_mon",						
			"upgrade_raid_stone_bounty_mon",
			"upgrade_raid_stone_bounty_improved_mon",			
			"upgrade_trader_silkroad_stone_mon",
			"upgrade_trader_silkroad_stone_improved_mon",
			"upgrade_melee_armor_iii_mon",
			"upgrade_melee_damage_iii_mon",
			"upgrade_ranged_armor_iii_mon",
			"upgrade_ranged_damage_iii_mon",
			"upgrade_religious_monastery_ovoo_mon",
			"upgrade_ranged_incendiary_mon",
			"upgrade_siege_chemistry_mon",
			"upgrade_unit_religious_piety_4_mon",
			"upgrade_unit_religious_piety_4_improved_mon",
			"upgrade_unit_religious_tithe_barn_4_mon",
			"upgrade_unit_religious_tithe_barn_4_improved_mon",
			"upgrade_unit_archer_4_mon",
			"upgrade_unit_crossbowman_4_mon",
			"upgrade_unit_horsearcher_4_mon",
			"upgrade_unit_horseman_4_mon",
			"upgrade_unit_knight_4_mon",
			"upgrade_unit_manatarms_4_mon",
			"upgrade_unit_spearman_4_mon",
			"upgrade_siege_adjustable_crossbar_mon",
			"upgrade_siege_adjustable_crossbar_improved_mon",
			"upgrade_siege_roller_trigger_mon",
			"upgrade_siege_roller_trigger_improved_mon",
			"upgrade_siege_works_mon",		
			"upgrade_siege_works_improved_mon",	
			"upgrade_manatarms_elite_army_tactics_mon",
			"upgrade_manatarms_elite_army_tactics_improved_mon",
			"upgrade_tech_university_biology_mon",
			"upgrade_tech_university_biology_improved_mon",
		},
	},
	sultanate = {
		AGE_DARK = {
			"upgrade_naval_manuscript_trade_sul",
			"upgrade_econ_resource_wood_fell_rate_1_sul",
			"upgrade_econ_villager_hunting_gear_1_sul",
			"upgrade_unit_town_center_wheelbarrow_1_sul",
			"upgrade_unit_religious_piety_4_sul",
			"upgrade_age2_scholar_military_production_sul",			
		},
		AGE_FEUDAL = {
			"upgrade_econ_extended_lines_sul",
			"upgrade_econ_resource_food_harvest_rate_2_sul",
			"upgrade_econ_resource_gold_harvest_rate_2_sul",
			"upgrade_econ_resource_wood_harvest_rate_2_sul",
			--"upgrade_naval_patchwork_repairs_sul",
			"upgrade_scout_forester_sul",
			"upgrade_villager_health_sul",
			"upgrade_unit_religious_sanctity_4_sul",
			"upgrade_landmark_scholar_sight_range_sul",			
			"upgrade_melee_armor_i_sul",
			"upgrade_melee_damage_i_sul",
			"upgrade_ranged_armor_i_sul",
			"upgrade_ranged_damage_i_sul",
			"upgrade_siege_engineers_sul",
			"upgrade_unit_spearman_2_sul",
		},
		AGE_CASTLE = {
			"upgrade_econ_drift_nets_sul",
			"upgrade_econ_resource_food_harvest_rate_3_sul",
			"upgrade_econ_resource_gold_harvest_rate_3_sul",
			"upgrade_econ_resource_wood_harvest_rate_3_sul",
			"upgrade_unit_archer_3_sul",
			"upgrade_unit_horseman_3_sul",
			"upgrade_unit_spearman_3_sul",
			"upgrade_naval_armored_hull_sul",
			"upgrade_naval_extra_hammocks_sul",
			-- Springald Crews
			"upgrade_naval_springald_ship_upgrade_1_sul",
			"upgrade_naval_incendiaries_sul",
			--"upgrade_naval_navigator_sul",
			"upgrade_melee_armor_ii_sul",
			"upgrade_melee_damage_ii_sul",
			"upgrade_ranged_armor_ii_sul",
			"upgrade_ranged_damage_ii_sul",
			"upgrade_landmark_force_march_sul",
			"upgrade_tech_military_academy_sul",
			"upgrade_tech_university_murder_holes_4_sul",
			"upgrade_unit_religious_herbal_medicine_4_sul",
			"upgrade_landmark_scholar_speed_sul",
			"upgrade_landmark_house_popcap_sul",
			"upgrade_improved_swords_sul",
			"upgrade_outpost_lookout_tower_sul", --landmark outpost improvement
			"upgrade_landmark_mosque_heal_sul",
			"upgrade_siege_weapon_speed_sul",
			"upgrade_age2_keep_town_center_sul", -- keep as TC
		},
		AGE_IMPERIAL = {
			"upgrade_econ_resource_food_harvest_rate_4_sul",
			"upgrade_econ_resource_gold_harvest_rate_4_sul",
			"upgrade_econ_resource_wood_harvest_rate_4_sul",
			"upgrade_melee_armor_iii_sul",
			"upgrade_melee_damage_iii_sul",
			"upgrade_ranged_armor_iii_sul",
			"upgrade_ranged_damage_iii_sul",
			"upgrade_landmark_hearty_rations_sul",
			"upgrade_unit_archer_4_sul",
			"upgrade_unit_crossbowman_4_sul",
			"upgrade_unit_horseman_4_sul",
			"upgrade_unit_knight_4_sul",
			"upgrade_unit_manatarms_4_sul",
			"upgrade_unit_spearman_4_sul",
			"upgrade_naval_shipwrights_sul",
			"upgrade_naval_heated_shot_sul",
			"upgrade_naval_swivel_cannon_sul",
			"upgrade_naval_explosives_sul",
			--"upgrade_naval_galley_cannon_sul",
			"upgrade_unit_religious_tithe_barn_4_sul",
			"upgrade_unit_religious_zealous_4_sul",
			"upgrade_siege_adjustable_crossbar_sul",
			"upgrade_siege_mathematics_sul",
			"upgrade_siege_roller_trigger_sul",			
			"upgrade_manatarms_elite_army_tactics_sul",
			"upgrade_siege_chemistry_sul",
			"upgrade_ranged_incendiary_sul",
			"upgrade_tech_university_architecture_4_sul",
			"upgrade_tech_university_biology_sul",
			"upgrade_siege_works_sul",			
			"upgrade_age3_war_elephant_elite_sul",
			"upgrade_landmark_keep_defense_sul",
			"upgrade_landmark_siege_elephant_sul",
		},
	},
	malian = {
		AGE_DARK = {	
		},
		AGE_FEUDAL = {
			"upgrade_naval_javelin_ships_mal",
			"upgrade_banco_repairs_mal",
			"upgrade_unit_spearman_2_mal",
			"upgrade_unit_scout_mal_2",
		},
		AGE_CASTLE = {
			"upgrade_sofa_armor_mal",
			"upgrade_archer_poison_arrow_mal",
			--"upgrade_trader_book_trade_mal",
			--"upgrade_transport_landing_parties_mal",
			"upgrade_unit_spearman_3_mal",
			"upgrade_unit_scout_mal_3",
			"upgrade_unit_javelin_3_mal",
			--"upgrade_unit_javelin_3_farimba_mal",
			"upgrade_unit_horseman_3_mal",
			"upgrade_unit_gbeto_3_mal",
			"upgrade_unit_archer_3_mal",
			--"upgrade_unit_archer_3_farimba_mal",
		},
		AGE_IMPERIAL = {
			"upgrade_naval_mounted_guns",
			
			"upgrade_sofa_farima_leadership_mal",
			"upgrade_donso_precision_training_mal",
			"upgrade_stealth_healing_mal",
			"upgrade_unit_religious_tithe_barn_4_mal",
			"upgrade_unit_spearman_4_mal",
			"upgrade_unit_scout_mal_4",
			"upgrade_unit_javelin_4_mal",
			--"upgrade_unit_javelin_4_farimba_mal",
			"upgrade_unit_horseman_4_mal",
			"upgrade_unit_gbeto_4_mal",
			"upgrade_unit_archer_4_mal",
			--"upgrade_unit_archer_4_farimba_mal",
		},
	},
	ottoman = {
		AGE_DARK = {	
		},
		AGE_FEUDAL = {
		},
		AGE_CASTLE = {
			"upgrade_unit_horseman_3_ott",
		},
		AGE_IMPERIAL = {
			"upgrade_naval_imperial_fleet_ott",
			--"upgrade_naval_reinforced_hulls_ott",
			"upgrade_ranged_janissary_guns_ott",
			"upgrade_unit_handcannon_4_ott",
			"upgrade_unit_horseman_4_ott",
		},
	},
	common = {
		AGE_DARK = {			
			"upgrade_econ_resource_wood_fell_rate_1",
			"upgrade_econ_villager_hunting_gear_1",
			"upgrade_unit_town_center_wheelbarrow_1",
		},
		AGE_FEUDAL = {			
			"upgrade_econ_extended_lines",
			"upgrade_econ_resource_food_harvest_rate_2",
			"upgrade_econ_resource_gold_harvest_rate_2",
			"upgrade_econ_resource_wood_harvest_rate_2",
			"upgrade_scout_forester",
			"upgrade_villager_health",
			
			"upgrade_naval_addsails",			
			
			"upgrade_melee_armor_i",
			"upgrade_melee_damage_i",
			"upgrade_ranged_armor_i",
			"upgrade_ranged_damage_i",
			"upgrade_siege_engineers",				
			
			"upgrade_unit_horsearcher_2",
			"upgrade_unit_spearman_2",
		},
		AGE_CASTLE = {			
			"upgrade_econ_drift_nets",
			"upgrade_econ_resource_food_harvest_rate_3",
			"upgrade_econ_resource_gold_harvest_rate_3",
			"upgrade_econ_resource_wood_harvest_rate_3",
			
			"upgrade_melee_armor_ii",
			"upgrade_melee_damage_ii",
			"upgrade_ranged_armor_ii",
			"upgrade_ranged_damage_ii",
			"upgrade_tech_military_academy",
			
			"upgrade_naval_armored_hull",
			"upgrade_naval_extra_hammocks",
			-- Springald Crews
			"upgrade_naval_springald_ship_upgrade_1",
			"upgrade_naval_incendiaries",
						
			"upgrade_siege_weapon_speed",
			"upgrade_tech_university_murder_holes_4",
			
			"upgrade_unit_religious_herbal_medicine_4",
			"upgrade_unit_archer_3",
			"upgrade_unit_horsearcher_3",
			"upgrade_unit_horseman_3",
			"upgrade_unit_spearman_3",			
		},
		AGE_IMPERIAL = {			
			"upgrade_econ_resource_food_harvest_rate_4",
			"upgrade_econ_resource_gold_harvest_rate_4",
			"upgrade_econ_resource_wood_harvest_rate_4",
			
			"upgrade_melee_armor_iii",
			"upgrade_melee_damage_iii",			
			"upgrade_ranged_armor_iii",
			"upgrade_ranged_damage_iii",
			
			"upgrade_unit_religious_piety_4",
			"upgrade_unit_religious_tithe_barn_4",
			"upgrade_unit_archer_4",
			"upgrade_unit_crossbowman_4",
			"upgrade_unit_horsearcher_4",
			"upgrade_unit_horseman_4",
			"upgrade_unit_knight_4",
			"upgrade_unit_manatarms_4",
			"upgrade_unit_spearman_4",
						
			"upgrade_manatarms_elite_army_tactics",
			"upgrade_ranged_incendiary",			
			"upgrade_tech_university_architecture_4",
			"upgrade_tech_university_biology",
			"upgrade_siege_chemistry",
			"upgrade_siege_works",
			
			"upgrade_siege_roller_trigger",
			"upgrade_siege_adjustable_crossbar",
			"upgrade_siege_mathematics",
			
			"upgrade_naval_shipwrights",
			"upgrade_naval_heated_shot",
			"upgrade_naval_swivel_cannon",
			"upgrade_naval_explosives",
		},
	},
	special = {
		-- enables treasure pick up
		treasures = "upgrade_add_pickup_resource_ability",
		-- enables reviving special units
		revives = "upgrade_revive_leader",
		-- provides additional health to all units
		health = "story_mode_health_bonus",
	},
}

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_GetCivilizationEntity(player_civ, bp_type)
	return BP_GetEntityBlueprint(AGS_ENTITY_TABLE[player_civ][bp_type])
end

function AGS_GetCivilizationUnit(player_civ, bp_type)
	return BP_GetSquadBlueprint(AGS_ENTITY_TABLE[player_civ][bp_type])
end

function AGS_GetNeutralEntity(bp_type)
	return BP_GetEntityBlueprint(AGS_ENTITY_TABLE["neutral"][bp_type])
end

function AGS_GetNeutralUnit(bp_type)
	return BP_GetSquadBlueprint(AGS_ENTITY_TABLE["neutral"][bp_type])
end

function AGS_EGroupName(player_id, entity_category)
	return "eg_player_" .. entity_category .. "_" .. tostring(player_id)
end

function AGS_SGroupName(player_id, unit_category)
	return "sg_player_" .. unit_category .. "_" .. tostring(player_id)
end

function AGS_EGroupNeutralName(unique_num, egroup_focus_name)
	return "eg_neutral_" .. egroup_focus_name .. "_" .. tostring(unique_num)
end

-- Spawn entity and return it to caller.
function AGS_SpawnEntity(player_id, egroup_name, bp_entity, position, position_offset, opt_do_rounding, opt_do_correction)
	if position == nil then
		position = Player_GetStartingPosition(player_id)	
	end
	if position_offset == nil then
		position_offset = World_Pos(0, 0, 0)	
	end	
	-- Determine proper position and rotation.
	local nx = position.x
	local ny = position.y
	local nz = position.z
	if opt_do_rounding ~= nil and opt_do_rounding then
		nx = 5 * math.floor(math.floor(position.x) / 5)
		ny = 5 * math.floor(math.floor(position.y) / 5)
		nz = 5 * math.floor(math.floor(position.z) / 5)
	end
	local placement = World_Pos(nx + position_offset.x, ny + position_offset.y, nz + position_offset.z)
	local rotation = World_Pos(nx + position_offset.x, ny + position_offset.y, nz + position_offset.z + 5)
	-- Spawn
	-- could have been done with
	-- Util_CreateEntities(playerid, egroupid, blueprintID, pos, numentities, toward, snapToGround, skipForceConstruct, useMarkerTransform)
	local e = Entity_CreateFacing(bp_entity, player_id, placement, rotation, true)
	
	if opt_do_correction then
		local safe_spawn = World_GetSpawnablePosition(placement, e)
		Entity_WarpToPos(e, safe_spawn)	
	end
	
	Entity_Spawn(e)
	Entity_ForceConstruct(e)
	Entity_SnapToGridAndGround(e, false)
	local eg = EGroup_CreateIfNotFound(egroup_name) 
	EGroup_Add(eg, e)
	Core_CallDelegateFunctions("EntitySpawned", {pbg = bp_entity, player = player_id, entity = e})
	return e	
end
-- Spawn squad and return it to caller in squad group.
function AGS_SpawnSquad(player_id, sgroup_name, bp_squad, position, position_offset, count)
	if position == nil then
		position = Player_GetStartingPosition(player_id)	
	end
	if position_offset == nil then
		position_offset = World_Pos(0, 0, 0)	
	end	
	-- Determine proper position and rotation.
	local nx = 5 * math.floor(math.floor(position.x) / 5)
	local ny = 5 * math.floor(math.floor(position.y) / 5)
	local nz = 5 * math.floor(math.floor(position.z) / 5)
	local placement = World_Pos(nx + position_offset.x, ny + position_offset.y, nz + position_offset.z)
	local rotation = World_Pos(nx + position_offset.x, ny + position_offset.y, nz + position_offset.z - 1)
	-- Spawn
	-- This probably caused lot of issues, let's do simple method from now on.
	-- local squad_group = Util_CreateSquads(player_id, sgroup_name, bp_squad, placement, nil, count, nil, false, rotation, nil, rotation, nil, nil, nil, nil, false)	
	local squad_group = SGroup_CreateIfNotFound(sgroup_name)
	UnitEntry_DeploySquads(player_id, squad_group, {{sbp = bp_squad, numSquads = count }}, placement)
	Core_CallDelegateFunctions("UnitsSpawned", player_id, position, squad_group)
	
	return squad_group	
end
function AGS_Print(text, opt_data, opt_level)
	if opt_level == nil then
		opt_level = 10
	end
	Util_PrintObject(text, opt_level)
	if opt_data ~= nil then
		Util_PrintObject(opt_data, opt_level)	
	end
end
-- relation can be R_ALLY, R_ENEMY, R_NEUTRAL
function AGS_IsMutualRelation(first_id, second_id, relation)
	return Player_ObserveRelationship(first_id, second_id) == relation 
	   and Player_ObserveRelationship(second_id, first_id) == relation 
end
function AGS_CountItems(table)
	if table ~= nil then
		return #table
	end
	return 0
end

function AGS_IsACapital(entity_id)		
	return Entity_GetStateModelBool(entity_id, "town_center_is_capital") or Entity_IsOfType(entity_id, AGS_BP_TC_CAPITAL)
end
-- Checks for both wonder and landmark with IsOfType
function AGS_IsALandmarkInner(entity_id)
	return Entity_IsOfType(entity_id, AGS_BP_LANDMARK) or Entity_IsOfType(entity_id, AGS_BP_LANDMARK_OTHER)
end

function AGS_IsALandmark(entity_id)		
	return AGS_IsALandmarkInner(entity_id) and not Entity_IsOfType(entity_id, AGS_BP_WONDER)	
end

function AGS_IsATownCenter(entity_id)		
	return Entity_IsOfType(entity_id, AGS_BP_TC) and not Entity_IsOfType(entity_id, AGS_BP_TC_CAPITAL) and not AGS_IsALandmarkInner(entity_id)		
end

function AGS_IsAKeep(entity_id)		
	return Entity_IsOfType(entity_id, AGS_BP_KEEP) and not AGS_IsALandmarkInner(entity_id)
end

function AGS_IsAWonder(entity_id)		
	return Entity_IsOfType(entity_id, AGS_BP_LANDMARK) and Entity_IsOfType(entity_id, AGS_BP_WONDER)	
end

function AGS_IsThisSpecialMobileBuildingDead(entity_id)
	return Entity_IsOfType(entity_id, AGS_BP_MOBILE) 
		and (AGS_IsALandmarkInner(entity_id) or Entity_IsOfType(entity_id, AGS_BP_TC_CAPITAL))
		and not Entity_GetStateModelBool(entity_id, "landmark_active")	
end

function AGS_IsLocalGame()
	if World_IsMultiplayerGame() then
		return false
	end
	return true
end

function AGS_ApplyUpgrade(player_id, upgrade)
	local bp_upgrade = BP_GetUpgradeBlueprint(upgrade)
	if not Player_HasUpgrade(player_id, bp_upgrade) then
		Player_CompleteUpgrade(player_id, bp_upgrade)				
	end
end

function AGS_RemoveUpgrade(player_id, upgrade)
	local bp_upgrade = BP_GetUpgradeBlueprint(upgrade)
	if not Player_HasUpgrade(player_id, bp_upgrade) then
		Player_RemoveUpgrade(player_id, bp_upgrade)				
	end
end

function AGS_CalculateCenterOffset(start, x_offset, z_offset)
	local x_val = 0
	local z_val = 0
	if start.x >= 0	then
		x_val = start.x - x_offset
	else
		x_val = start.x + x_offset
	end
	
	if start.z >= 0	then	
		z_val = start.z - z_offset
	else
		z_val = start.z + z_offset
	end
	
	return World_Pos(x_val, World_GetHeightAt(x_val, z_val), z_val)
end
AGS_SAE_SELF = 0
AGS_SAE_ALLY = 1
AGS_SAE_ENEMY = 2
-- Returns relation with local player, very useful for anything that can decide best on relation.
-- This automatically resolves also problem related to dynamic relations as it uses team method to resolve friendship.
-- Nota that this will not return ALLY if player and local player are not able to win together due to team rules.
function AGS_GetRelation(player)
	-- Self.
	if AGS_GS_LOCAL_PLAYER.id == player.id then
		return AGS_SAE_SELF
	end
	-- Ally.
	-- Orifinally it would use simplified version AGS_IsMutualRelation, but that would result in bad answer.
	if AGS_Teams_IsTeamVictoryEligible(player) then
		return AGS_SAE_ALLY
	end	
	-- Most likely enemy or neutral.
	return AGS_SAE_ENEMY
end
-- Checks if array table contains value.
function AGS_Contains(table, value)
	for _, item in pairs(table) do
		if item == value then
			return true
		end
	end	
	return false
end
-- Returns elements that were not in used list.
function AGS_GetFreeItems(all, used)
	local free = { }
	for _, item in pairs(all) do
		if not AGS_Contains(used, item) then
			table.insert(free, item)			
		end
	end	
	return free
end
-- It's safe to call LocString on this result
function AGS_GetCurrentName(player)
	return Core_GetPlayerName(player.id)
end

function AGS_GetNextHuman()
	for _, player in pairs(PLAYERS) do
		if not player.isEliminated and Player_IsHuman(player.id) then
			AGS_Print("AGS_GetNextHuman", player.id)	
			return player
		end
	end	
	return nil
end