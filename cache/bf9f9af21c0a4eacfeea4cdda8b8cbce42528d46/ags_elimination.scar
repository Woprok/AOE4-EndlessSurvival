---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Elimination win condition.
-- A player is eliminated when they quit (through the button in the Pause menu) or otherwise drop/disconnect. 
-- The last remaining player/team wins. 
-- This is different from Relic. We are checking for AI elimination only in Surrender condition.
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_elimination_data.scar")
AGS_ELIMINATION_MODULE = "AGS_Elimination"
AGS_ELIMINATION_OBJECTIVE = nil
AGS_ELIMINATION_ACTIVE = true

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_ELIMINATION_MODULE)

function AGS_Elimination_UpdateModuleSettings()
	AGS_Print("AGS_Elimination_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Elimination then
		AGS_ELIMINATION_ACTIVE = false
	end
end
-- Overrides default behaviour of DefaultOnPlayerAITakeover() to keep game going regardless of number of humans.
function AGS_Elimination_OnPlayerAITakeover(context)
	AGS_Print("AGS_Elimination_OnPlayerAITakeover")
	-- I guess we will keep this as it was. For some reason its never set free.
	OnPlayerAITakeover_Hold()
	if context ~= nil and context.player ~= nil then
		local player = Core_GetPlayersTableEntry(context.player)
		if player ~= nil and player.isHuman and not player.isEliminated then
			AGS_Print(string.format("Elimination_OnPlayerAITakeover() - %s replaced by AI", AGS_GetCurrentName(player).LocString))		
			-- Human players here quit the game and are eliminated
			-- AI players here were hosted on the now disconnected human players computer, and need to move to another
			-- client. This was done in C++ land (in GameWorld::SetGameOver and GameWorld::StationTakeOverAi) so don't
			-- eliminate them here.
			if not AGS_GLOBAL_SETTINGS.EliminationSettings.EnableAITakeover then
				AGS_SetPlayerDefeated(player.id, AGS_Presentations_Loss, AGS_WR_ELIMINATION,
					AGS_Objectives_PresentWrap(
						AGS_ELIMINATION_OBJECTIVE, 
						OS_Failed, 
						AGS_OBJECTIVES_ELIMINATION.title))	
			else 
				-- This should IMHO be updated in case something relies on it.
				player.isHuman = false
			end
		end		
	end	
end

function AGS_Elimination_OnPlay()
	AGS_Print("AGS_Elimination_OnPlay")
	AGS_Elimination_CreateObjective()
end

function AGS_Elimination_TreatyStarted()
	AGS_Print("AGS_Elimination_TreatyStarted")
	AGS_ELIMINATION_ACTIVE = false
end

function AGS_Elimination_TreatyEnded()
	AGS_Print("AGS_Elimination_TreatyEnded")
	AGS_ELIMINATION_ACTIVE = true and AGS_GLOBAL_SETTINGS.Elimination
end

function AGS_Elimination_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_Elimination_OnPlayerDefeated")
	if reason == AGS_WR_ELIMINATION then
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_ELIMINATION)
		-- This would end the game for single team game without check.
		-- Teammates needs to be eliminated by other conditions.
		if AGS_Elimination_CanEndGame(player) then
			AGS_Conditions_CheckVictory(AGS_ELIMINATION_ACTIVE, AGS_Presentations_Victory, AGS_WR_ELIMINATION,
				AGS_Objectives_PresentWrap(
					AGS_ELIMINATION_OBJECTIVE, 
					OS_Complete, 
					AGS_OBJECTIVES_ELIMINATION.title))
		end
	end
end

function AGS_Elimination_OnObjectiveToggle(toggle)
	AGS_Print("AGS_Elimination_OnObjectiveToggle")
	if AGS_ELIMINATION_OBJECTIVE ~= nil then
		AGS_Objectives_Set(AGS_ELIMINATION_OBJECTIVE, nil, toggle)	
	end
end

function AGS_Elimination_OnGameOver()
	AGS_Print("AGS_Elimination_OnGameOver")
	AGS_Elimination_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_Elimination_CreateObjective()
	AGS_ELIMINATION_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_ELIMINATION, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_ELIMINATION_OBJECTIVE, OS_Incomplete, true)
end

function AGS_Elimination_RemoveObjective()
	AGS_Objectives_Set(AGS_ELIMINATION_OBJECTIVE, nil, false)
end

function AGS_Elimination_CanEndGame(eliminated_player)
	-- Cant end game with elimination in case of single team game.
	-- This is same as surrender . In both cases we should avoid ending game with single team.
	if AGS_Teams_IsSingleTeamSandbox() then
		return false
	end	
	if AGS_GLOBAL_SETTINGS.IsSandBox then
		return false
	end
	return true
end