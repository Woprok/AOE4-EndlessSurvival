---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Regicide win condition.
-- A player is eliminated when king is defeated.
-- The last remaining player/team wins. 
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_regicide_data.scar")
AGS_REGICIDE_MODULE = "AGS_Regicide"
AGS_REGICIDE_OBJECTIVE = nil
AGS_REGICIDE_ACTIVE = true

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_REGICIDE_MODULE)	
-- If Regicide is enabled in settings, force king option to be true.
function AGS_Regicide_AdjustSettings()
	AGS_Print("AGS_Regicide_AdjustSettings")
	if AGS_GLOBAL_SETTINGS.Regicide then
		AGS_GLOBAL_SETTINGS.StartingKings = 1
	end
end
-- Unregister Regicide and prevent it from being initialized.
function AGS_Regicide_UpdateModuleSettings()
	AGS_Print("AGS_Regicide_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Regicide then
		Core_UnregisterModule(AGS_REGICIDE_MODULE)
	end
end

function AGS_Regicide_OnPlay()
	AGS_Print("AGS_Regicide_OnPlay")
	AGS_Regicide_InitializeKings()
	Rule_AddGlobalEvent(AGS_Regicide_OnEntityKilled, GE_EntityKilled)
	Rule_AddGlobalEvent(AGS_Regicide_OnDamageReceived, GE_DamageReceived)
	AGS_Regicide_CreateObjective()
	AGS_Regicide_UpdateObjective()
end

function AGS_Regicide_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_Regicide_OnPlayerDefeated")
	if reason == AGS_WR_REGICIDE then 
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_REGICIDE)
		AGS_Conditions_CheckVictory(AGS_REGICIDE_ACTIVE, AGS_Presentations_Victory, AGS_WR_REGICIDE,
			AGS_Objectives_PresentWrap(
				AGS_REGICIDE_OBJECTIVE, 
				OS_Complete, 
				AGS_OBJECTIVES_REGICIDE.title_victory))
	else
		AGS_Regicide_KillAllKings(player)
	end	
	AGS_Regicide_UpdateObjective()
end

function AGS_Regicide_OnRelationshipChanged(observer_id, target_id)
	AGS_Print("AGS_Regicide_OnRelationshipChanged")
	AGS_Regicide_UpdateObjective()
end
	
function AGS_Regicide_TreatyStarted()
	AGS_Print("AGS_Regicide_TreatyStarted")
	AGS_REGICIDE_ACTIVE = false
end

function AGS_Regicide_TreatyEnded()
	AGS_Print("AGS_Regicide_TreatyEnded")
	AGS_REGICIDE_ACTIVE = true
end

function AGS_Regicide_OnObjectiveToggle(toggle)
	AGS_Print("AGS_Regicide_OnObjectiveToggle")
	if AGS_REGICIDE_OBJECTIVE ~= nil then
		AGS_Objectives_Set(AGS_REGICIDE_OBJECTIVE, nil, toggle)	
	end
end

function AGS_Regicide_OnGameOver()
	AGS_Print("AGS_Regicide_OnGameOver")
	Rule_RemoveGlobalEvent(AGS_Regicide_OnEntityKilled)
	Rule_RemoveGlobalEvent(AGS_Regicide_OnDamageReceived)
	AGS_Regicide_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------

function AGS_Regicide_OnEntityKilled(context)
	if context == nil or context.victimSquad == nil or context.victimOwner == nil or World_OwnsSquad(context.victimSquad) then
		return
	end
	if not Squad_IsOfType(context.victimSquad, AGS_BP_KING) then
		return
	end
	local squad_uwid = Squad_GetID(context.victimSquad)
	local owner = Core_GetPlayersTableEntry(context.victimOwner)
	-- Only tracked kings.
	if owner.AGS_Kings[squad_uwid] == nil then
		return
	end
	-- King is dead
	owner.AGS_Kings[squad_uwid].is_alive = false
	AGS_Regicide_UpdateObjective()
	-- Try to eliminate player.
	local king_count = AGS_Regicide_GetPlayerKingCount(owner)
	-- Check if player still has reason to be in kill game.
	if king_count.recruited > 0 and king_count.remaining <= 0 then 
		AGS_Regicide_Eliminate(owner)		
	end
end

function AGS_Regicide_OnDamageReceived(context)
	-- Ignore invalid and world entities.
	if context == nil or context.victimSquad == nil or context.victimOwner == nil or World_OwnsSquad(context.victimSquad)
		or context.attackerOwner == nil then
		return
	end
	if not Squad_IsOfType(context.victimSquad, AGS_BP_KING) then
		return
	end
	local squad_uwid = Squad_GetID(context.victimSquad)
	local owner = Core_GetPlayersTableEntry(context.victimOwner)
	-- Ignore repairing/healing entities.
	if context.isRepairing then
		return
	end
	-- Only alive entities are interesting here.
	if context.currentHealth == nil or context.currentHealth == 0.0 then
		return
	end
	-- Only tracked kings.
	if owner.AGS_Kings[squad_uwid] == nil then
		return
	end	
	local attacker = Core_GetPlayersTableEntry(context.attackerOwner)
	AGS_Notifications_Damaged(squad_uwid, attacker, owner, AGS_NOTIFICATIONS_REGICIDE_ATTACKED)
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- Marks all kings as dead and kills them in the world.
function AGS_Regicide_KillAllKings(player)
	for _, king in pairs(player.AGS_Kings) do
		if king.is_alive then
			king.is_alive = false
			if king.squad ~= nil and Squad_IsAlive(king.squad) then
				Squad_Kill(king.squad)
			end
		end		
	end
end

function AGS_Regicide_InitializeKings()
	for _, player in pairs(PLAYERS) do
		player.AGS_Kings = {}
		local eg_player_kings = Player_GetSquadsFromType(player.id, AGS_BP_KING)
		
		local AGS_TrackKing = function(gid, idx, sid)
			local squad_uwid = Squad_GetID(sid)
			-- Track squad UWIDs.
			if player.AGS_Kings[squad_uwid] == nil then				
				player.AGS_Kings[squad_uwid] = {
					squad = sid,
					is_alive = Squad_IsAlive(sid),
				}
			end
		end	
		SGroup_ForEach(eg_player_kings, AGS_TrackKing)	
	end	
end

function AGS_Regicide_CreateObjective()
	AGS_REGICIDE_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_REGICIDE, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_REGICIDE_OBJECTIVE, OS_Incomplete, true, true, COUNTER_CountUpTo)
end

function AGS_Regicide_UpdateObjective()
	if AGS_REGICIDE_OBJECTIVE == nil then 
		return
	end
	local enemies_kings_statistics = AGS_Regicide_CountEnemyKings(AGS_GS_LOCAL_PLAYER)
	if enemies_kings_statistics == nil then 
		AGS_Objectives_Set(AGS_REGICIDE_OBJECTIVE, nil, nil, false)
		return
	else
		AGS_Objectives_Set(AGS_REGICIDE_OBJECTIVE, nil, nil, true)
	end
	-- Update the progress bar of the objective.
	AGS_Objectives_Progress(
		AGS_REGICIDE_OBJECTIVE, 
		enemies_kings_statistics.destroyed, 
		enemies_kings_statistics.recruited, 
		enemies_kings_statistics.destroyed / enemies_kings_statistics.recruited
	)
end

function AGS_Regicide_RemoveObjective()
	AGS_Objectives_Set(AGS_REGICIDE_OBJECTIVE, nil, false)
end

function AGS_Regicide_Eliminate(player)
	AGS_Regicide_KillAllKings(player)
	AGS_SetPlayerDefeated(
		player.id, 
		AGS_Presentations_Loss, 
		AGS_WR_REGICIDE,
		AGS_Objectives_PresentWrap(
			AGS_REGICIDE_OBJECTIVE, 
			OS_Failed, 
			AGS_OBJECTIVES_REGICIDE.title_lost))
end

---------------------------------------------------------------------------------------------------
-- Helpers:
---------------------------------------------------------------------------------------------------
-- Returns number of Kings a player has recruited/remaining.
-- player_kings is used to add count to already existing structure. Can be nil if you want new count.
function AGS_Regicide_GetPlayerKingCount(player, player_kings)
	if player_kings == nil then
		player_kings = {
			recruited = 0,
			remaining = 0,
			destroyed = 0,
		}	
	end
	-- For every player count active and recruited kings.
	for _, king in pairs(player.AGS_Kings) do
		player_kings.recruited = player_kings.recruited + 1
		if king.is_alive then 
			player_kings.remaining = player_kings.remaining + 1
		else 
			player_kings.destroyed = player_kings.destroyed + 1
		end
	end	
	return player_kings	
end
-- Returns number of Enemy Kings standing for a given player.
function AGS_Regicide_CountEnemyKings(player)	
	local king_counter = nil
	for _, enemy in pairs(AGS_Teams_GetAllCurrentOpponents(player, true)) do 
		king_counter = AGS_Regicide_GetPlayerKingCount(enemy, king_counter)
	end
	return king_counter	
end