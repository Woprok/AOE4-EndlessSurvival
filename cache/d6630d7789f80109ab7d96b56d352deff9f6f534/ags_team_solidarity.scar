---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Team Solidarity subcondition.
-- A player is eliminated when any ally is eliminated. 
-- The last remaining player/team wins. 
---------------------------------------------------------------------------------------------------

import("conditions/conditiondata/ags_team_solidarity_data.scar")
AGS_TEAM_SOLIDARITY_MODULE = "AGS_TeamSolidarity"
AGS_TEAM_SOLIDARITY_OBJECTIVE = nil
AGS_TEAM_SOLIDARITY_ACTIVE = true

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_TEAM_SOLIDARITY_MODULE)	

function AGS_TeamSolidarity_UpdateModuleSettings()
	AGS_Print("AGS_TeamSolidarity_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.TeamSolidarity then
		Core_UnregisterModule(AGS_TEAM_SOLIDARITY_MODULE)
	end
end

function AGS_TeamSolidarity_OnPlay()
	AGS_Print("AGS_TeamSolidarity_OnPlay")
	AGS_TeamSolidarity_CreateObjective()
end

function AGS_TeamSolidarity_TreatyStarted()
	AGS_Print("AGS_TeamSolidarity_TreatyStarted")
	AGS_TEAM_SOLIDARITY_ACTIVE = false
end

function AGS_TeamSolidarity_TreatyEnded()
	AGS_Print("AGS_TeamSolidarity_TreatyEnded")
	AGS_TEAM_SOLIDARITY_ACTIVE = true
end

function AGS_TeamSolidarity_OnPlayerEliminated(player, reason)
	AGS_Print("AGS_TeamSolidarity_OnPlayerEliminated")
	-- Enforces teammates solidarity on other reasons that are not expected to end the match.
	if reason ~= AGS_WR_TEAM_SOLIDARITY then 
		AGS_TeamSolidarity_Enforce(player)
	end
	if reason == AGS_WR_TEAM_SOLIDARITY then
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_TEAM_SOLIDARITY)
		AGS_Conditions_CheckVictory(AGS_TEAM_SOLIDARITY_ACTIVE, AGS_Presentations_Victory, AGS_WR_TEAM_SOLIDARITY,
			AGS_Objectives_PresentWrap(
				AGS_TEAM_SOLIDARITY_OBJECTIVE, 
				OS_Complete, 
				AGS_OBJECTIVES_TEAMSOLIDARITY.title_victory))
	end
end

function AGS_TeamSolidarity_OnGameOver()
	AGS_Print("AGS_TeamSolidarity_OnGameOver")
	AGS_TeamSolidarity_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_TeamSolidarity_CreateObjective()
	AGS_TEAM_SOLIDARITY_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_TEAMSOLIDARITY, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_TEAM_SOLIDARITY_OBJECTIVE, OS_Incomplete, true)
end

function AGS_TeamSolidarity_RemoveObjective()
	AGS_Objectives_Set(AGS_TEAM_SOLIDARITY_OBJECTIVE, nil, false)
end
-- Enforce Teammates Solidarity.
function AGS_TeamSolidarity_Enforce(defeated_teammate)
	if defeated_teammate ~= nil then
		if not AGS_TEAM_SOLIDARITY_ACTIVE then
			-- We can only use static teammates, anything else would cause immediate loss for whole game.
			for _, ally in pairs(AGS_Teams_GetStaticTeamAliveMembers(defeated_teammate.AGS_Team.allies)) do			
				AGS_TeamSolidarity_Eliminate(ally, defeated_teammate)
			end
		else			
			-- Without treaty status this is simplest valid way to do it.
			for _, ally in pairs(AGS_Teams_GetAllMutualFriendshipPlayers(defeated_teammate)) do
				AGS_TeamSolidarity_Eliminate(ally, defeated_teammate)
			end
		end
	end	
end

function AGS_TeamSolidarity_Eliminate(ally, defeated_teammate)
	AGS_SetPlayerDefeated(
		ally.id, 
		AGS_Presentations_Loss, 
		AGS_WR_TEAM_SOLIDARITY,
		AGS_Objectives_PresentWrap(
			AGS_TEAM_SOLIDARITY_OBJECTIVE, 
			OS_Failed, 
			AGS_OBJECTIVES_TEAMSOLIDARITY.title_lost, 
			AGS_GetCurrentName(owner)))
end